<script src="{{ 'jszip.min.js' | asset_url }}" defer></script>

<style>
    html{
        scroll-behavior: smooth;
    }
</style>

<div class="page-width section-{{ section.id }}-padding">
  <div class="row-page-title">
    <h1 class="main-page-title page-title h0{% if settings.animations_reveal_on_scroll %} scroll-trigger animate--fade-in{% endif %}">
        {{ page.title | escape }}
    </h1>
    <div class="carousel-desktop">
        <div class="carousel-container">
            <button class="carousel-control prev" style="display:none;" aria-label="Previous">
                <svg id="Layer_2" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 19.04 11.49">
                    <defs>
                        <style>.cls-1{stroke-miterlimit:5;}.cls-1,.cls-2{fill:none;stroke:#000;stroke-width:1.5px;}.cls-2{stroke-linejoin:round;}</style>
                    </defs>
                    <g id="Layer_2-2">
                        <polyline class="cls-1" points="6.59 .54 1.09 5.74 6.59 10.94"/>
                        <line class="cls-2" x1="19.04" y1="5.74" x2="1.09" y2="5.74"/>
                    </g>
                </svg>
            </button>
            <div class="carousel">
                <div class="carousel-track append-collection-title">
                </div>
            </div>
            <button class="carousel-control next" style="display:none;" aria-label="Next">
                <svg id="Layer_2" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 19.04 11.49">
                    <defs>
                        <style>.cls-1{stroke-miterlimit:5;}.cls-1,.cls-2{fill:none;stroke:#000;stroke-width:1.5px;}.cls-2{stroke-linejoin:round;}</style>
                    </defs>
                    <g id="Layer_2-2">
                        <polyline class="cls-1" points="12.45 .54 17.95 5.74 12.45 10.94"/>
                        <line class="cls-2" y1="5.74" x2="17.95" y2="5.74"/>
                    </g>
                </svg>
            </button>
        </div>
    </div>

    <div class="carousel-mobile">
        <div class="carousel-container">
            <div class="carousel">
                <div class="carousel-track append-collection-title-mobile">
                </div>
            </div>
            <div class="mobile-carousel-btns">
                <button class="carousel-control prev" style="display:none;" aria-label="Previous">
                    <svg id="Layer_2" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 19.04 11.49">
                        <defs>
                            <style>.cls-1{stroke-miterlimit:5;}.cls-1,.cls-2{fill:none;stroke:#000;stroke-width:1.5px;}.cls-2{stroke-linejoin:round;}</style>
                        </defs>
                        <g id="Layer_2-2">
                            <polyline class="cls-1" points="6.59 .54 1.09 5.74 6.59 10.94"/>
                            <line class="cls-2" x1="19.04" y1="5.74" x2="1.09" y2="5.74"/>
                        </g>
                    </svg>
                </button>
                <button class="carousel-control next" style="display:none;" aria-label="Next">
                   <svg id="Layer_2" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 19.04 11.49">
                        <defs>
                            <style>.cls-1{stroke-miterlimit:5;}.cls-1,.cls-2{fill:none;stroke:#000;stroke-width:1.5px;}.cls-2{stroke-linejoin:round;}</style>
                        </defs>
                        <g id="Layer_2-2">
                            <polyline class="cls-1" points="12.45 .54 17.95 5.74 12.45 10.94"/>
                            <line class="cls-2" y1="5.74" x2="17.95" y2="5.74"/>
                        </g>
                    </svg>
                </button>
            </div>
        </div>
    </div>
  </div>

{% comment %} <section class="installation-videos">
    <div class="container">
        <h2 class="section-title font-neue-roman">Videos</h2>

        <div class="videos-carousel-container">
            <div id="video_carousels" class="videos-carousel">
            </div>
            <div class="progress-bar-track"><div class="progress-bar"></div></div>
            <div class="video-carousel-btns">
                <button class="carousel-btn prev-btn disabled">
                    <svg id="Layer_2" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 19.04 11.49">
                        <defs>
                            <style>.cls-1{stroke-miterlimit:5;}.cls-1,.cls-2{fill:none;stroke:#000;stroke-width:1.5px;}.cls-2{stroke-linejoin:round;}</style>
                        </defs>
                        <g id="Layer_2-2">
                            <polyline class="cls-1" points="6.59 .54 1.09 5.74 6.59 10.94"/>
                            <line class="cls-2" x1="19.04" y1="5.74" x2="1.09" y2="5.74"/>
                        </g>
                    </svg>
                </button>
                <button class="carousel-btn next-btn">
                    <svg id="Layer_2" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 19.04 11.49">
                        <defs>
                            <style>.cls-1{stroke-miterlimit:5;}.cls-1,.cls-2{fill:none;stroke:#000;stroke-width:1.5px;}.cls-2{stroke-linejoin:round;}</style>
                        </defs>
                        <g id="Layer_2-2">
                            <polyline class="cls-1" points="12.45 .54 17.95 5.74 12.45 10.94"/>
                            <line class="cls-2" y1="5.74" x2="17.95" y2="5.74"/>
                        </g>
                    </svg>
                </button>
            </div>
        </div>

    </div>
</section> {% endcomment %}

<style type="text/css">
    section.installation-videos .container {
        padding: 0px;
    }
    section.installation-videos {
        padding: 60px 0px 35px;
    }
    section.installation-videos .section-title{
        margin: 0px 0px 20px;
        font-size: 2.083vw;
        line-height: 2.917vw;
        letter-spacing: 0.65px;
    }

    /* Videos Carousel */
    .videos-carousel-container {
        position: relative;
        overflow: hidden;
        width: 100%;
        max-width: 100%;
    }

    .videos-carousel {
        display: flex;
        transition: transform 0.3s ease;
        gap: 0px 17px;
    }

    .video-carousel-item {
        flex: 0 0 40.25%;
        box-sizing: border-box;
        position: relative;
    }

    .video-carousel-item iframe {
        border: none;
        display: flex;
    }

    .carousel-mobile.no-carousels .carousel-track {
        flex-wrap: wrap;
    }

    .carousel-btn {
        background-color: rgba(90, 88, 87, 1);
        opacity: 1;
        border: none;
        display: flex;
        align-items: center;
        justify-content: center;
        width: 45px;
        height: 45px;
        border-radius: 100%;
        cursor: pointer;
        transition: all 0.3s ease;
    }

    .carousel-btn img{
        filter: brightness(0) invert(1);
    }
    
    .carousel-btn.disabled{
        opacity: 0.4;
    }

    .video-carousel-btns{
        position: relative;
        width: 100%;
        display: flex;
        justify-content: flex-end;
        gap: 0px 17px;
        margin-top: 40px;
        margin-bottom: 20px;
    }
    
    .prev-btn {
        left: 0;
    }

    .video-carousel-btns button svg path,
    .carousel-container button svg path{ 
        stroke: rgba(249, 246, 243, 1);
    }

    .video-carousel-btns svg{
        width: 18.06px;
    }

    .video-carousel-btns svg .cls-1,
    .video-carousel-btns svg .cls-2{
        stroke: rgba(249, 246, 243, 1) !important;
    }

    .next-btn {
        right: 0;
    }

    .video-carousel-item video {
        width: 100%;
        height: auto;
        border-radius: 8px;
    }

    .video-description {
        font-size: 16px;
        line-height: 26px;
        color: rgba(41, 37, 33, 1);
        letter-spacing: 0.65px;
        margin: 11px 0px 0px;
    }

    .accordion-icon svg {
        width: 13px;
        height: 13px;
    }

    .progress-bar {
        display: block;
        height: 1.5px;
        background-color: rgba(194, 191, 186, 1);
        width: 0;
        transition: width 0.3s ease;
    }

    .progress-bar-track {
        display: none;
        width: 100%;
        background-color: rgba(90, 88, 87, 1);
        position: relative;
        height: 1.5px;
        margin-top: 10px;
    }
    
    .carousel-desktop.no-carousels .carousel {
        padding-right: 0px;
    }

    .carousel-desktop.no-carousels .carousel-item {
        text-align: right;
        min-width: unset !important;
        width: max-content;
    }

    .carousel-desktop.no-carousels .carousel-track {
        justify-content: flex-end;
        gap: 0px 60px;
    }
    
    .carousel-desktop.no-carousels .carousel-item:last-child a {
        padding-right: 0px;
    }

    .carousel-mobile.no-carousels .mobile-carousel-btns {
        display: none !important;
    }

    @media (max-width: 768px) {
        .video-carousel-item {
            flex: 0 0 79.5%;
        }

        .progress-bar-track {
            display: block;
            width: 100%;
            background-color: rgba(90, 88, 87, 1);
            min-width: 100%;
            position: relative;
            height: 1.5px;
            margin-top: 20px;
        }
    }

    @media (min-width: 769px) and (max-width: 1200px) {
        .video-carousel-item {
            flex: 0 0 45%;
        }
    }

    @media (max-width: 767px){
        section.installation-videos {
            padding: 30px 0px 20px;
        }
        section.installation-videos .section-title {
            margin: 0px 0px 20px;
            font-size: 30px;
            line-height: 42px;
        }
        .progress-bar {
            display: block !important;
        }
        .video-carousel-btns {
            margin-top: 30px;
            margin-bottom: 20px;
        }
    }

    @media (max-width: 600px){
        img.video-play-btn {
            top: 17.5vw;
            width: 7.833vw;
            height: 7.833vw;
        }
    }

</style>
  

  <!-- Technical Accordions -->
<section class="technical-accordions">
    <div class="container">
        <div class="accordion">
            <div class="accordion-header active" id="spec-sheets">
              <span class="accord-title">Spec Sheets</span>
              <span class="accord-right">
              <span class="accordion-icon">
                <svg width="14" height="2" viewBox="0 0 14 2" fill="none" xmlns="http://www.w3.org/2000/svg">
                    <path d="M0.5 1L7.21667 1L13.5 1" stroke="#5A5857" stroke-width="1.5"></path>
                </svg>
              </span>
                </span>
            </div>
            <div class="accordion-content" style="height: auto;">
                
                <div id="specs-files-accordion" class="accordion-downloads">
                </div>
            </div>
        </div>

        <div class="accordion installation-videos">
            <div class="accordion-header" id="spec-sheets">
              <span class="accord-title">Videos</span>
              <span class="accord-right">
              <span class="accordion-icon">
                <svg width="14" height="13" viewBox="0 0 14 13" fill="none" xmlns="http://www.w3.org/2000/svg">
                    <path d="M7.21667 0L7.21667 13M0.5 6.5H7.21667L13.5 6.5" stroke="#5A5857" stroke-width="1.5"/>
                </svg>
              </span>
                </span>
            </div>
            <div class="accordion-content">
                <div class="videos-carousel-container">
                    <div id="video_carousels" class="videos-carousel">
                    </div>
                    <div class="progress-bar-track"><div class="progress-bar"></div></div>
                    <div class="video-carousel-btns">
                        <button class="carousel-btn prev-btn disabled">
                            <svg id="Layer_2" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 19.04 11.49">
                                <defs>
                                    <style>.cls-1{stroke-miterlimit:5;}.cls-1,.cls-2{fill:none;stroke:#000;stroke-width:1.5px;}.cls-2{stroke-linejoin:round;}</style>
                                </defs>
                                <g id="Layer_2-2">
                                    <polyline class="cls-1" points="6.59 .54 1.09 5.74 6.59 10.94"/>
                                    <line class="cls-2" x1="19.04" y1="5.74" x2="1.09" y2="5.74"/>
                                </g>
                            </svg>
                        </button>
                        <button class="carousel-btn next-btn">
                            <svg id="Layer_2" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 19.04 11.49">
                                <defs>
                                    <style>.cls-1{stroke-miterlimit:5;}.cls-1,.cls-2{fill:none;stroke:#000;stroke-width:1.5px;}.cls-2{stroke-linejoin:round;}</style>
                                </defs>
                                <g id="Layer_2-2">
                                    <polyline class="cls-1" points="12.45 .54 17.95 5.74 12.45 10.94"/>
                                    <line class="cls-2" y1="5.74" x2="17.95" y2="5.74"/>
                                </g>
                            </svg>
                        </button>
                    </div>
                </div>
            </div>
        </div>

        <div class="accordion">
            <div class="accordion-header">
                Install Instructions
                <span class="accordion-icon">
                    <svg width="14" height="13" viewBox="0 0 14 13" fill="none" xmlns="http://www.w3.org/2000/svg">
                        <path d="M7.21667 0L7.21667 13M0.5 6.5H7.21667L13.5 6.5" stroke="#5A5857" stroke-width="1.5"/>
                    </svg>
                </span>
            </div>
            <div class="accordion-content">
                <div id="install-instruct" class="accordion-downloads"></div>
            </div>         
        </div>

        <div class="accordion">
            <div class="accordion-header">
              <span class="accord-title">IES Files</span>
              <span class="accord-right">
              <span class="accordion-icon">
                <svg width="14" height="13" viewBox="0 0 14 13" fill="none" xmlns="http://www.w3.org/2000/svg">
                    <path d="M7.21667 0L7.21667 13M0.5 6.5H7.21667L13.5 6.5" stroke="#5A5857" stroke-width="1.5"/>
                </svg>
              </span>
                </span>
            </div>
          
            <div class="accordion-content">
                <div id="ies-files" class="accordion-downloads">
                </div>
            </div>
        </div>
    </div>
</section>

<style type="text/css">
    .accordion-content {
        height: 0px;
        overflow: hidden;
        padding: 0px;
        transition: 0.3s all;
    }

    .accordion-content p{
        margin-top: 0px;
    }

    .carousel-desktop.no-carousels .carousel {
        padding-right: 0px;
    }

button#downloadAllBtn, button#downloadAllBtnIes, button#downloadAllBtnInstall {
    font-size: 14px;
    line-height: 17.5px;
    text-transform: uppercase;
    color: rgba(41, 37, 33, 1);
    background: transparent;
    border: 1.25px solid rgba(41, 37, 33, 1);
    padding: 0px 29px;
    height: 40px;
    border-radius: 8px !important;
    display: flex;
    align-items: center;
    gap: 0px 16px;
}

span.accord-right {
    display: flex;
    align-items: center;
}

  a.item-object-id.selected {
    text-decoration: underline;
}

    .accordion-header {
        padding: 10px 0px;
        cursor: pointer;
        display: flex;
        justify-content: space-between;
        align-items: center;
        border-top: 1.5px solid rgba(41, 37, 33, 1);
        font-size: 2.083vw;
        line-height: 2.917vw;
        letter-spacing: 0.65px;
    }

    .accordion-header.active {
        padding-bottom: 20px;
    }

    .accordion-icon {
        font-size: 22px;
        transition: transform 0.3s ease;
        padding-right: 13px;
        font-weight: 300;
        display: flex;
        align-items: center;
    }

    section.technical-accordions .container {
        padding: 0px;
    }

    .accordion-download-item img {
        margin-left: 12px;
    }

    .accordion-downloads {
        display: flex;
        flex-wrap: wrap;
        gap: 20px;
        margin-bottom: 65px;
    }

    .accordion-download-item {
        border: 1.25px solid rgba(41, 37, 33, 1);
        padding: 0px;
        min-width: 306px;
        border-radius: 8px;
        display: flex;
        justify-content: center;
        align-items: center;
    }

    .accordion-download-item:hover {
        background-color: rgba(41, 37, 33, 1);
    }

    button#downloadAllBtn:hover, 
    button#downloadAllBtnIes:hover,
    button#downloadAllBtnInstall:hover {
        color: rgba(249, 246, 243, 1);
        background-color: rgba(41, 37, 33, 1);
    }

    button#downloadAllBtn:hover svg path, 
    button#downloadAllBtnIes:hover svg path,
    button#downloadAllBtnInstall:hover svg path {
        stroke: rgba(249, 246, 243, 1);
    }

    .accordion-download-item:hover a{
        color: rgba(249, 246, 243, 1);
    }

    .accordion-download-item:hover svg path{
        stroke: rgba(249, 246, 243, 1);
    }

    .accordion-download-item a{
        font-size: 14px;
        line-height: 17.5px;
        text-transform: uppercase;
        color: rgba(41, 37, 33, 1);
        display: flex;
        align-items: center;
        height: 40px;
        gap: 0px 16px;
        padding: 0px 29px;
    }

    section.technical-accordions {
        padding-bottom: 11.458vw;
    }

    /*
    ** Responsive
    */
    @media (min-width: 1500px){
        .accordion-header,
        section.installation-videos .section-title{
            font-size: 30px;
            line-height: 42px;
        }

        section.technical-accordions {
            padding-bottom: 165px;
        }
    }
    @media (max-width: 767px){
        section.technical-accordions {
            padding-top: 50px;
            padding-bottom: 100px;
        }

        .accordion-download-item a svg,
        button#downloadAllBtn svg, 
        button#downloadAllBtnIes svg,
        button#downloadAllBtnInstall svg {
            width: 11.8px;
            height: auto;
        }
        .video-carousel-item iframe {
            height: 158px;
        }
        .accordion-header {
            font-size: 26px;
            line-height: 42px;
            padding-bottom: 35px;
        }
        .accordion-download-item {
            width: 100%;
            min-width: unset;
            height: auto;
        }
        .accordion-download-item a{
            display: flex;
            align-items: center;
            justify-content: center;
            padding: 0px 15.22px;
            text-align: center;
            min-height: 40px;
            width: 100%;
        }
        button#downloadAllBtn, button#downloadAllBtnIes, button#downloadAllBtnInstall {
            width: 100%;
            padding: 0px 15.22px;
            justify-content: center;
        }
    }
</style>

<script type="text/javascript">


    function selectItem(selectedElement) {
        const items = document.querySelectorAll('.item-object-id');
        items.forEach(item => item.classList.remove('selected'));
        selectedElement.classList.add('selected');

        const vidCarousel = document.getElementById('video_carousels');
        vidCarousel.style.transform = "translateX(0px)"; // Resetting to initial slide
        prevBtn.classList.add('disabled');
        nextBtn.classList.remove('disabled');

        scrollPosition = 0; // Reset the scroll position
        currentSlide = 0; // Reset the current slide
        updateProgressBar(); // Reset the progress bar if needed
    }

    const accordionHeaders = document.querySelectorAll('.accordion-header');

    accordionHeaders.forEach(header => {
        header.addEventListener('click', () => {
            document.querySelectorAll('.accordion-content').forEach(content => {
                content.style.height = '0px';
                content.previousElementSibling.classList.remove('active');
                content.previousElementSibling.querySelector('.accordion-icon').innerHTML = `
                    <svg width="14" height="13" viewBox="0 0 14 13" fill="none" xmlns="http://www.w3.org/2000/svg">
                        <path d="M7.21667 0L7.21667 13M0.5 6.5H7.21667L13.5 6.5" stroke="#5A5857" stroke-width="1.5"/>
                    </svg>
                `;
            });

            const content = header.nextElementSibling;
            content.style.height = 'auto';
            header.classList.add('active');
            header.querySelector('.accordion-icon').innerHTML = `
                <svg width="14" height="2" viewBox="0 0 14 2" fill="none" xmlns="http://www.w3.org/2000/svg">
                    <path d="M0.5 1L7.21667 1L13.5 1" stroke="#5A5857" stroke-width="1.5"/>
                </svg>
            `;
        });
    });
</script>

  </div>


  <style type="text/css">
    .row-page-title {
        display: flex;
        align-items: flex-end;
        justify-content: space-between;
    }
    .row-page-title h1.main-page-title.page-title {
        border-bottom: none;
        padding-bottom: 0px;
        margin: 56px 0px 25px;
    }
    .technical-product-carousel {
        display: flex;
    }

    .carousel-desktop {
        position: relative;
        max-width: 100%;
        min-width: 755px;
        overflow: hidden;
    }

    .carousel-desktop .carousel{
        padding-bottom: 28px;
    }

    .carousel {
        overflow: hidden;
        width: 100%;
        padding: 0px 30px;
    }

    .carousel-mobile {
        width: 100%;
    }

    .carousel-mobile .carousel {
        padding: 0px !important;
        margin-left: 0px;
    }

    .carousel-track {
        display: flex;
        transition: transform 0.5s ease-in-out;
    }

    .carousel-item {
        box-sizing: border-box;
        text-align: center;
        width: 20%;
        min-width: 20%;
        padding: 0px 2px;
    }

    .carousel-item a {
        display: block;
        text-transform: uppercase;
        font-size: 14px;
        line-height: 26px;
        color: rgba(41, 37, 33, 1);
        padding: 0px;
    }


    .carousel-control {
        color: rgba(41, 37, 33, 1);
        position: absolute;
        background: none;
        z-index: 1;
        top: 0px;
        background-color: rgba(90, 88, 87, 1);
        opacity: 1;
        border: none;
        display: flex;
        align-items: center;
        justify-content: center;
        width: 30px;
        height: 30px;
        border-radius: 100%;
        cursor: pointer;
        transition: all 0.3s ease;
    }

    .prev{
        left: 0px;
    }

    .mobile-carousel-btns svg,
    .carousel-control svg{
        width: 18.06px;
    }

    .mobile-carousel-btns svg .cls-1,
    .mobile-carousel-btns svg .cls-2,
    .carousel-control svg .cls-1,
    .carousel-control svg .cls-2 {
        stroke: rgba(249, 246, 243, 1) !important;
    }

    .next{
        right: 0px;
    }

    .carousel-control img {
        width: 15px;
        filter: brightness(0) invert(1);
    }

    /* Mobile Carousel */
.carousel-mobile .carousel-container {
    width: 100%;
    overflow: hidden;
    position: relative;
}

.carousel-mobile .carousel-track {
    display: flex;
    transition: transform 0.5s ease-in-out;
}

.carousel-mobile .carousel-item {
    box-sizing: border-box;
    width: 33.33%;
    flex: 0 0 33.33%;
    min-width: 33.33%;
    padding-bottom: 20px; /* Space between rows */
}

.carousel-mobile .carousel-item a{
    text-align: left;
}

.carousel-mobile .carousel-group {
    display: flex;
    flex-wrap: wrap;
    min-width: 100%;
    width: 100%;
}

.carousel-mobile .carousel-control {
    background: none;
    z-index: 1;
    background-color: rgba(90, 88, 87, 1);
    opacity: 0.4;
    border: none;
    display: flex;
    align-items: center;
    justify-content: center;
    width: 45px;
    height: 45px;
    border-radius: 100%;
    cursor: pointer;
    transition: all 0.3s ease;
    position: relative;
    transform: none;
    left: unset !important;
}

.carousel-mobile .carousel-control:hover{
    opacity: 1;
}

.mobile-carousel-btns {
    display: flex;
    gap: 0px 17px;
    justify-content: flex-end;
    margin-top: 20px;
}

.mobile-carousel-btns button img{
    width: auto;
    height: auto;
}

.carousel-mobile .prev {
    left: 0px;
}

.carousel-mobile .next {
    right: 0px;
}

@media (min-width: 992px) {
    .carousel-mobile {
        display: none;
    }
}





    /*
    ** Responsive
    */
    @media (max-width: 1200px){
        .carousel-item{
            width: 25%;
            min-width: 25%;
        }   
    }

    @media (max-width: 991px) and (min-width: 768px) {
        .carousel-item {
            width: 33.33%;
            min-width: 33.33%;
        }
    }

    @media (max-width: 767px) {
        .carousel-item {
            width: 100%;
            min-width: 100%;
        }
    }


    @media (max-width: 991px){
        .row-page-title{
            flex-wrap: wrap;
            border-bottom: 0px;
            padding-bottom: 0px;
        }
        .carousel-desktop{
            display: none !important;
        }
        .row-page-title h1.main-page-title.page-title{
            width: 100%;
            border-bottom: 1px solid rgba(41, 37, 33, 1);
            font-size: 50px;
            line-height: 57px;
            padding-bottom: 10px;
            margin-top: 50px;
        }
        .carousel-container {
            margin-top: 22px;
            width: 100%;
        }
    }

  </style>


  <script>
    
    const query = `query PageContent{
     page(handle:"resources"){
      metafields(identifiers:[{namespace:"custom", key:"multiple_info"}]){
        id 
        type
        value
        references(first:100){
          edges{
            node{
             	...on Metaobject{
                id
                type
                fields{
                  key
                  value
                  reference{
                    ...on Metaobject {
                      id
                      type
                      fields{
                        key
                        value
                      }
                    }
                  }
                }
              } 
            }
          }
        }
      }
    	}
    }`;
      

    function appendCollectionTitles(response) {
      var getCollectionLength = response.data.page.metafields[0].references.edges.length;
      var getCollection = response.data.page.metafields[0].references.edges;
      for (let i = 0; i < getCollectionLength; i++) {
        var getCollectionId = getCollection[i].node.id;
        var getOnlyId = getCollectionId.replace("gid://shopify/Metaobject/", "");
            //console.log(getOnlyId, 'getOnlyId');
          var itemLength = getCollection[i].node.fields.length;
          var itemWrap = getCollection[i].node.fields;
          for (let j = 0; j < itemLength; j++) {
            if(itemWrap[j].key == 'collection_title'){
              //console.log(itemWrap[j].value);
              var collectionHtml = `<div class='carousel-item' onclick='reloadVidCarousel'><a href='javascript:void(0);' onclick='selectItem(this)' class='item-object-id font-calling-code' data-metaobject-id='${getOnlyId}'>${itemWrap[j].value}</a></div>`;
              document.querySelector('.append-collection-title').insertAdjacentHTML('beforeend', collectionHtml);
              document.querySelector('.append-collection-title-mobile').insertAdjacentHTML('beforeend', collectionHtml);
            }
          }
      }
      
    }

    function loadComponents(){
        const buttons = document.querySelectorAll('.item-object-id');
        buttons.forEach(function(button) {
          button.addEventListener('click', function(event) {
              const metaobjectId = event.target.getAttribute('data-metaobject-id');
              
              //console.log('metaobjectId', metaobjectId);
               if (metaobjectId) {
                    fetchMetaobjectData(metaobjectId);
                } else {
                    console.error('Metaobject ID is missing or invalid');
                }
            
          });
        });
        
        // Check for auto-selection before clicking the first item
        const urlParams = new URLSearchParams(window.location.search);
        const autoSelectParam = urlParams.get('autoselect');
        
        if (autoSelectParam) {
            //console.log('Auto-select parameter found:', autoSelectParam);
            
            // Create mapping between URL parameters and carousel item text
            const itemMapping = {
                'artafex-2': ['artafex 2', 'artafex2'],
                'artafex-4': ['artafex 4', 'artafex4'],
                'linear': ['linear'],
                'phasex': ['phasex', 'phase x']
            };
            
            // Find the matching carousel item
            const targetTexts = itemMapping[autoSelectParam];
            if (targetTexts) {
                let targetItem = null;
                
                buttons.forEach(item => {
                    const itemText = item.textContent.toLowerCase().trim();
                    if (targetTexts.some(text => itemText.includes(text))) {
                        targetItem = item;
                    }
                });
                
                if (targetItem) {
                    
                    // Function to apply selected class with extensive debugging
                    function applySelectedClass() {
                        
                        // Find all items again to check for changes
                        const allItemsNow = document.querySelectorAll('.item-object-id');
                        
                        // Check if our target item is still in the DOM
                        const isInDOM = document.contains(targetItem);
                        
                        if (!isInDOM) {
                            // Try to find it again by text content
                            allItemsNow.forEach((item, index) => {
                                if (item.textContent.toLowerCase().trim().includes(targetItem.textContent.toLowerCase().trim())) {
                                    targetItem = item;
                                }
                            });
                        }
                        
                        // Remove selected from all items
                        allItemsNow.forEach((item, index) => {
                            const wasSelected = item.classList.contains('selected');
                            item.classList.remove('selected');
                        });
                        
                        // Add selected to ALL matching items (desktop + mobile)
                        const targetText = targetItem.textContent.toLowerCase().trim();
                        let addedCount = 0;
                        
                        allItemsNow.forEach((item, index) => {
                            if (item.textContent.toLowerCase().trim() === targetText) {
                                item.classList.add('selected');
                                addedCount++;
                            }
                        });
                        
                        
                        // Check all elements to see which one actually has selected class
                        setTimeout(() => {
                            const allItemsCheck = document.querySelectorAll('.item-object-id');
                            allItemsCheck.forEach((item, index) => {
                                const hasSelected = item.classList.contains('selected');
                            });
                        }, 100);
                    }
                    
                    // Apply selected class immediately
                    applySelectedClass();
                    
                    // Click the item to trigger all normal functionality
                    targetItem.click();
                    
                    // Re-apply selected class after click processing
                    setTimeout(() => {
                        applySelectedClass();
                    }, 1000);
                    
                    // Final application to ensure it sticks
                    setTimeout(() => {
                        applySelectedClass();
                    }, 1000);
                    
                    // More aggressive monitoring with MutationObserver
                    const observer = new MutationObserver((mutations) => {
                        mutations.forEach((mutation) => {
                            if (mutation.type === 'attributes' && mutation.attributeName === 'class') {
                                if (!targetItem.classList.contains('selected')) {
                                    targetItem.classList.add('selected');
                                }
                            }
                        });
                    });
                    
                    // Start observing the target item for class changes
                    observer.observe(targetItem, { 
                        attributes: true, 
                        attributeFilter: ['class'] 
                    });
                    
                    // Also keep the interval monitoring as backup
                    const monitor = setInterval(() => {
                        if (!targetItem.classList.contains('selected')) {
                            targetItem.classList.add('selected');
                        }
                    }, 1000);
                    
                    // Stop monitoring after 10 seconds
                    setTimeout(() => {
                        observer.disconnect();
                        clearInterval(monitor);
                    }, 10000);
                    
                    return; // Don't click the first item if we auto-selected
                }
            }
        }
        
        // Default behavior: click the first item if no auto-selection
        const firstCarouselItemLink = document.querySelector('.carousel-track.append-collection-title .carousel-item:nth-child(1) a');
        if (firstCarouselItemLink) {
            firstCarouselItemLink.click();
        }
    }
    
function apiCall(query) {
  
	return fetch(`${window.Shopify.routes.root}api/graphql.json`, 
    	{ method: 'POST', 
          headers: { 'Content-Type': 'application/graphql', 
                     "Access-Control-Origin": "*", 
                     'X-Shopify-Storefront-Access-Token': window.shopifyStorefrontAccessTokens[window.location.origin]
                   },
          "body": query 
        })
          .then(response => response.json()); }
    
          apiCall(query).then(response => { 
            appendCollectionTitles(response);
            setTimeout(function(){
                loadComponents();
            }, 1000);
            //console.log(response, 'response');
          });

    function getVideos(vidObj){
      
      var vidTitleLen = vidObj.references.nodes.length;
      var vidTitleIdsLen = vidObj.references.nodes;
      const videoCarouselWrap = document.querySelector('#video_carousels');
      
      let allVideoHtml = '';
               //console.log("vidTitleIdsLen", vidTitleIdsLen);
      for (let i = 0; i < vidTitleLen; i++) {
            var getVideoCol = vidTitleIdsLen[i].fields;

            //console.log(getVideoCol, 'getVideoCol');

            const videoId = getVideoCol.find(obj => obj.key === 'video_id')?.value;
            const videoTitle = getVideoCol.find(obj => obj.key === 'video_title')?.value;
                videoCarouselWrap.innerHTML = '';
                var videoHtml = `<div class="video-carousel-item">
                                    <iframe width="100%" height="275px" style="border-radius:8px;" src="http://fast.wistia.com/embed/iframe/${videoId}?version=v1&controlsVisibleOnLoad=true&playerColor=efebe6" allowfullscreen webkitallowfullscreen mozallowfullscreen></iframe>
                                    <p class="video-description font-neue-roman">${videoTitle}</p>
                                </div>`;
                allVideoHtml += videoHtml;
      }
      videoCarouselWrap.innerHTML = allVideoHtml;
    }

    // Update the getInstallInstructions function
    function getInstallInstructions(installationSheets) {
        const downloadInstallWrap = document.getElementById('install-instruct');
        const urlsInstall = [];
        
        let allInstallHTML = `<button id="downloadAllBtnInstall" class="font-calling-code">Download All 
            <svg width="12" height="13" viewBox="0 0 12 13" fill="none" xmlns="http://www.w3.org/2000/svg">
            <path d="M10.5 6.72721L5.71988 11.8L10.5 6.72721Z" fill="#292521"/>
            <path d="M0.939753 6.72721L5.71988 11.8L0.939753 6.72721Z" fill="#292521"/>
            <path d="M5.71988 0L5.71988 11.8M5.71988 11.8L10.5 6.72721M5.71988 11.8L0.939752 6.72721" stroke="#292521" stroke-width="1.5" stroke-miterlimit="10"/>
            </svg>
        </button>`;
        
        for (let i = 0; i < installationSheets.length; i++) {
            const installCol = installationSheets[i].fields;
            const installTitle = installCol.find(obj => obj.key === 'install_instruction_title')?.value;
            const installUrl = installCol.find(obj => obj.key === 'install_instruction_pdf')?.reference?.url;
            
            if (installTitle && installUrl) {
            urlsInstall.push({ url: installUrl, title: installTitle });
            
            allInstallHTML += `<div class="accordion-download-item">
                <a href="${installUrl}" download="${installTitle}.pdf" class="font-calling-code" target="_blank">
                ${installTitle}
                <svg width="12" height="13" viewBox="0 0 12 13" fill="none" xmlns="http://www.w3.org/2000/svg">
                    <path d="M10.5 6.72721L5.71988 11.8L10.5 6.72721Z" fill="#292521"/>
                    <path d="M0.939753 6.72721L5.71988 11.8L0.939753 6.72721Z" fill="#292521"/>
                    <path d="M5.71988 0L5.71988 11.8M5.71988 11.8L10.5 6.72721M5.71988 11.8L0.939752 6.72721" stroke="#292521" stroke-width="1.5" stroke-miterlimit="10"/>
                </svg>
                </a>
            </div>`;
            }
        }
        
        downloadInstallWrap.innerHTML = allInstallHTML;
        
        // Add event listener for the download all button
        document.getElementById('downloadAllBtnInstall')?.addEventListener('click', () => {
            if (urlsInstall.length > 0) {
            downloadFilesAsZip(urlsInstall, 'installation-instructions.zip');
            }
        });
    }

    // Update the getSpreadSheets function
    function getSpreadSheets(specsSheets) {
        const downloadSpreadWrap = document.getElementById('specs-files-accordion');
        const urls = [];
        
        let allPdfHtml = `<button id="downloadAllBtn" class="font-calling-code">Download All 
            <svg width="12" height="13" viewBox="0 0 12 13" fill="none" xmlns="http://www.w3.org/2000/svg">
            <path d="M10.5 6.72721L5.71988 11.8L10.5 6.72721Z" fill="#292521"/>
            <path d="M0.939753 6.72721L5.71988 11.8L0.939753 6.72721Z" fill="#292521"/>
            <path d="M5.71988 0L5.71988 11.8M5.71988 11.8L10.5 6.72721M5.71988 11.8L0.939752 6.72721" stroke="#292521" stroke-width="1.5" stroke-miterlimit="10"/>
            </svg>
        </button>`;
        
        for (let i = 0; i < specsSheets.length; i++) {
            const specsCol = specsSheets[i].fields;
            const specsTitle = specsCol.find(obj => obj.key === 'specs_sheet_title')?.value;
            const specsUrl = specsCol.find(obj => obj.key === 'specs_sheet_pdp')?.reference?.url;
            
            if (specsTitle && specsUrl) {
            urls.push({ url: specsUrl, title: specsTitle });
            
            allPdfHtml += `<div class="accordion-download-item">
                <a href="${specsUrl}" download="${specsTitle}.pdf" class="font-calling-code" target="_blank">
                ${specsTitle}
                <svg width="12" height="13" viewBox="0 0 12 13" fill="none" xmlns="http://www.w3.org/2000/svg">
                    <path d="M10.5 6.72721L5.71988 11.8L10.5 6.72721Z" fill="#292521"/>
                    <path d="M0.939753 6.72721L5.71988 11.8L0.939753 6.72721Z" fill="#292521"/>
                    <path d="M5.71988 0L5.71988 11.8M5.71988 11.8L10.5 6.72721M5.71988 11.8L0.939752 6.72721" stroke="#292521" stroke-width="1.5" stroke-miterlimit="10"/>
                </svg>
                </a>
            </div>`;
            }
        }
        
        downloadSpreadWrap.innerHTML = allPdfHtml;
        
        // Add event listener for the download all button
        document.getElementById('downloadAllBtn')?.addEventListener('click', () => {
            if (urls.length > 0) {
            downloadFilesAsZip(urls, 'spec-sheets.zip');
            }
        });
    }

    // IES Files
    function getIesFiles(iesFiles) {
        const IesSpreadWrap = document.getElementById('ies-files');
        const urls = [];
        
        let allIesHtml = `<button id="downloadAllBtnIes" class="font-calling-code">Download All 
            <svg width="12" height="13" viewBox="0 0 12 13" fill="none" xmlns="http://www.w3.org/2000/svg">
            <path d="M10.5 6.72721L5.71988 11.8L10.5 6.72721Z" fill="#292521"/>
            <path d="M0.939753 6.72721L5.71988 11.8L0.939753 6.72721Z" fill="#292521"/>
            <path d="M5.71988 0L5.71988 11.8M5.71988 11.8L10.5 6.72721M5.71988 11.8L0.939752 6.72721" stroke="#292521" stroke-width="1.5" stroke-miterlimit="10"/>
            </svg>
        </button>`;
        
        for (let i = 0; i < iesFiles.length; i++) {
            const iesCol = iesFiles[i].fields;
            const iesTitle = iesCol.find(obj => obj.key === 'ies_title')?.value;
            const iesFile = iesCol.find(obj => obj.key === 'ies_pdf_file')?.reference;
            
            if (iesTitle && iesFile?.url) {
            urls.push({ 
                url: iesFile.url, 
                title: iesTitle,
                extension: 'ies' // Force IES extension
            });
            
            allIesHtml += `<div class="accordion-download-item">
                <a href="${iesFile.url}" class="font-calling-code" target="_blank">
                ${iesTitle}
                <svg width="12" height="13" viewBox="0 0 12 13" fill="none" xmlns="http://www.w3.org/2000/svg">
                    <path d="M10.5 6.72721L5.71988 11.8L10.5 6.72721Z" fill="#292521"/>
                    <path d="M0.939753 6.72721L5.71988 11.8L0.939753 6.72721Z" fill="#292521"/>
                    <path d="M5.71988 0L5.71988 11.8M5.71988 11.8L10.5 6.72721M5.71988 11.8L0.939752 6.72721" stroke="#292521" stroke-width="1.5" stroke-miterlimit="10"/>
                </svg>
                </a>
            </div>`;
            }
        }
        
        IesSpreadWrap.innerHTML = allIesHtml;
        
        // Add event listener for the download all button
        document.getElementById('downloadAllBtnIes')?.addEventListener('click', async () => {
            if (urls.length > 0) {
            try {
                const zip = new JSZip();
                
                // Show loading state
                const downloadBtn = document.getElementById('downloadAllBtnIes');
                const originalText = downloadBtn.innerHTML;
                downloadBtn.innerHTML = 'Processing...';
                downloadBtn.style.opacity = '0.7';
                
                // Process all files
                for (const file of urls) {
                try {
                    const response = await fetch(file.url, {
                    method: 'GET',
                    mode: 'cors',
                    headers: {
                        'Accept': '*/*'
                    }
                    });
                    
                    if (!response.ok) {
                    throw new Error(`HTTP error! status: ${response.status}`);
                    }
                    
                    const content = await response.blob();
                    // Add file to zip with .ies extension
                    zip.file(`${file.title}.zip`, content);
                    
                } catch (error) {
                    console.error(`Error processing file ${file.title}:`, error);
                }
                }
                
                // Generate the zip file
                const content = await zip.generateAsync({
                type: 'blob',
                compression: 'DEFLATE',
                compressionOptions: {
                    level: 6 // Balanced compression level
                }
                });
                
                // Create and trigger download
                const downloadUrl = URL.createObjectURL(content);
                const link = document.createElement('a');
                link.href = downloadUrl;
                link.download = 'ies-files.zip';
                document.body.appendChild(link);
                link.click();
                
                // Cleanup
                setTimeout(() => {
                URL.revokeObjectURL(downloadUrl);
                document.body.removeChild(link);
                downloadBtn.innerHTML = originalText;
                downloadBtn.style.opacity = '1';
                }, 1000);
                
            } catch (error) {
                console.error('Error creating ZIP:', error);
                alert('There was an error creating the ZIP file. Please try again.');
                const downloadBtn = document.getElementById('downloadAllBtnIes');
                downloadBtn.innerHTML = originalText;
                downloadBtn.style.opacity = '1';
            }
            }
        });
    }

    // Js Zip function to download zip files
    async function downloadFilesAsZip(files, zipFileName) {
        // Create new ZIP file
        const zip = new JSZip();
        
        // Function to get file extension from URL
        const getFileExtension = (url) => {
            const extension = url.split('.').pop().toLowerCase();
            return ['pdf', 'ies'].includes(extension) ? extension : 'pdf';
        };

        try {
            // Add each file to the ZIP
            for (const file of files) {
            try {
                const response = await fetch(file.url);
                if (!response.ok) throw new Error(`HTTP error! status: ${response.status}`);
                
                const blob = await response.blob();
                const extension = getFileExtension(file.url);
                
                // Add file to zip with proper extension
                zip.file(`${file.title}.${extension}`, blob);
            } catch (error) {
                console.error(`Error processing ${file.title}:`, error);
            }
            }

            // Generate ZIP file
            const zipContent = await zip.generateAsync({
            type: 'blob',
            compression: 'DEFLATE',
            compressionOptions: {
                level: 9
            }
            });

            // Create download link
            const url = window.URL.createObjectURL(zipContent);
            const link = document.createElement('a');
            link.href = url;
            link.download = zipFileName;
            document.body.appendChild(link);
            link.click();

            // Cleanup
            setTimeout(() => {
            document.body.removeChild(link);
            window.URL.revokeObjectURL(url);
            }, 1000);

        } catch (error) {
            console.error('Error creating ZIP file:', error);
            alert('There was an error creating the ZIP file. Please try again.');
        }
    }

    function fetchMetaobjectData(metaobjectId) {
  const metaGid = `gid://shopify/Metaobject/${metaobjectId}`;
  
  const query = {
    query: `
      {
        metaobject(id: "${metaGid}") {
          fields {
            key
            value
            reference {
              ... on GenericFile {
                url
              }
            }
            references(first: 20) {
              nodes {
                ... on Metaobject {
                  id
                  type
                  fields {
                    key
                    value
                    reference {
                      ... on GenericFile {
                        url
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    `
  };

  fetch(`${window.Shopify.routes.root}api/graphql.json`, {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
      'X-Shopify-Storefront-Access-Token': window.shopifyStorefrontAccessTokens[window.location.origin]
    },
    body: JSON.stringify(query)
  })
  .then(response => response.json())
  .then(data => {
    if (!data.data?.metaobject?.fields) {
      throw new Error('Invalid response structure');
    }

    const fields = data.data.metaobject.fields;
    
    // Find fields by keys
    const findField = (keys) => {
      if (typeof keys === 'string') keys = [keys];
      return fields.find(f => keys.includes(f.key));
    };

    // Get all relevant fields
    const videoField = findField(['video_list', 'embed_videos']);
    const iesField = findField(['ies_files', 'ies_file']);
    const installField = findField(['install_instructions', 'installation_instructions']);
    const specsField = findField(['specs_sheets_pdf']); // Updated to match exact field name

    // Clear existing content
    ['video_carousels', 'ies-files', 'install-instruct', 'specs-files-accordion'].forEach(id => {
      const element = document.getElementById(id);
      if (element) element.innerHTML = '';
    });

    // Process videos if they exist
    if (videoField?.references?.nodes?.length) {
      getVideos(videoField);
    }

    // Process IES files if they exist
    if (iesField?.references?.nodes?.length) {
      getIesFiles(iesField.references.nodes);
    }

    // Process installation instructions if they exist
    if (installField?.references?.nodes?.length) {
      getInstallInstructions(installField.references.nodes);
    }

    // Process spec sheets if they exist
    if (specsField?.references?.nodes?.length) {
      getSpreadSheets(specsField.references.nodes);
    }
  })
  .catch(error => {
    console.error('Error:', error);
  });
}
    
  </script>

  <script type="text/javascript">
    const desktopCarousel = document.querySelector('.carousel-desktop');
    desktopCarousel.style.display = 'none';

    document.addEventListener('DOMContentLoaded', function () {    
        setTimeout(function () {
            const track = document.querySelector('.carousel-track');
            const items = Array.from(track.children);
            const nextButton = document.querySelector('.carousel-control.next');
            const prevButton = document.querySelector('.carousel-control.prev');
            desktopCarousel.style.display = 'block';
            const mobileCarousel = document.querySelector('.carousel-mobile');

            let itemWidth = items[0].getBoundingClientRect().width;
            let visibleItems = calculateVisibleItems();
            let currentSlide = 0;
            //console.log('items.length', items.length);
            
            // Initialize by disabling the prev button
            prevButton.classList.add('disabled');

            if(items.length > 5){
            nextButton.style.display = 'flex';
            prevButton.style.display = 'flex';
            desktopCarousel.classList.remove('no-carousels');
            }else{
            desktopCarousel.classList.add('no-carousels');
            }

            function moveToSlide(slideIndex) {
                track.style.transform = `translateX(-${slideIndex * itemWidth}px)`;
                currentSlide = slideIndex;

                updateButtonStatess();
            }

            function updateButtonStatess() {
                // Disable prev button on the first slide
                if (currentSlide === 0) {
                    prevButton.classList.add('disabled');
                } else {
                    prevButton.classList.remove('disabled');
                }

                // Disable next button on the last slide
                if (currentSlide >= items.length - visibleItems) {
                    nextButton.classList.add('disabled');
                } else {
                    nextButton.classList.remove('disabled');
                }
            }

            nextButton.addEventListener('click', function () {
                if (currentSlide < items.length - visibleItems) {
                    moveToSlide(currentSlide + 1);
                }
            });

            prevButton.addEventListener('click', function () {
                if (currentSlide > 0) {
                    moveToSlide(currentSlide - 1);
                }
            });

            const screenWidth = window.innerWidth;
            mobileCarousel.classList.add('no-carousels');
                if (screenWidth <= 767) {
                    return 1;
                    if(items.length > 6){
                    nextButton.style.display = 'flex';
                    prevButton.style.display = 'flex';
                    mobileCarousel.classList.remove('no-carousels');
                    }
                } else {
                    mobileCarousel.classList.add('no-carousels');
                    return 5;
                }
            // Calculate the number of visible items based on screen width
            function calculateVisibleItems() {
                const screenWidth = window.innerWidth;

                if (screenWidth <= 767) {
                    return 1;
                    if(items.length > 6){
                    nextButton.style.display = 'flex';
                    prevButton.style.display = 'flex';
                    mobileCarousel.classList.remove('no-carousels');
                    }
                } else {
                    mobileCarousel.classList.add('no-carousels');
                    return 5;
                }
            }

            // Recalculate item width and visible items on resize
            window.addEventListener('resize', function () {
                itemWidth = items[0].getBoundingClientRect().width;
                visibleItems = calculateVisibleItems();
                moveToSlide(0); // Reset to the first slide
            });

            // Swipe functionality for mobile
            let startX;
            track.addEventListener('touchstart', function (e) {
                startX = e.touches[0].clientX;
            });

            track.addEventListener('touchend', function (e) {
                const endX = e.changedTouches[0].clientX;
                const distance = endX - startX;

                if (distance < -50 && currentSlide < items.length - visibleItems) {
                    moveToSlide(currentSlide + 1);
                } else if (distance > 50 && currentSlide > 0) {
                    moveToSlide(currentSlide - 1);
                }
            });
        }, 500);
    });

    document.addEventListener('DOMContentLoaded', function () {

        const prevBtn = document.querySelector('.prev-btn');
        const nextBtn = document.querySelector('.next-btn');
        const carousel = document.querySelector('.videos-carousel');
        let scrollPosition = 0;

        // Custom Progress bar
        const progressBar = document.querySelector('.progress-bar');
        const totalItems = carousel.querySelectorAll('.video-carousel-item').length;

        function updateProgressBar() {
            const maxScrollPosition = carousel.scrollWidth - carousel.clientWidth;
            const progress = scrollPosition / maxScrollPosition;
            progressBar.style.width = `${Math.min(progress * 100, 100)}%`;
        }

        // Update button states based on scroll position
        function updateButtonStates() {
            const itemWidth = carousel.querySelector('.video-carousel-item').offsetWidth + 17;
            const maxScrollPosition = carousel.scrollWidth - carousel.clientWidth;

            // Disable prev button if at the start, otherwise enable it
            if (scrollPosition <= 0) {
                prevBtn.classList.add('disabled'); 
            } else {
                prevBtn.classList.remove('disabled'); 
            }

            // Disable next button only if at or very near the end, otherwise enable it
            if (scrollPosition >= maxScrollPosition) {
                nextBtn.classList.add('disabled');
            } else {
                nextBtn.classList.remove('disabled');
            }
            
        }

        nextBtn.addEventListener('click', () => {
            const itemWidth = carousel.querySelector('.video-carousel-item').offsetWidth + 17;
            const maxScrollPosition = carousel.scrollWidth - carousel.clientWidth;

            // Scroll only if not at the end
            if (scrollPosition < maxScrollPosition) {
                scrollPosition = Math.min(scrollPosition + itemWidth, maxScrollPosition); // Cap scroll position at the max
                carousel.style.transform = `translateX(-${scrollPosition}px)`;
                updateProgressBar();
                updateButtonStates();
            }
        });

        prevBtn.addEventListener('click', () => {
            const itemWidth = carousel.querySelector('.video-carousel-item').offsetWidth + 17;

            // Scroll only if not at the start
            if (scrollPosition > 0) {
                scrollPosition = Math.max(scrollPosition - itemWidth, 0); // Cap scroll position at 0
                carousel.style.transform = `translateX(-${scrollPosition}px)`;
                updateProgressBar();
                updateButtonStates();
            }
        });

        // Initialize the progress bar and button states when the page loads
        updateProgressBar();
        updateButtonStates();

        const mobileTrack = document.querySelector('.carousel-mobile .carousel-track');
        const mobileItems = Array.from(mobileTrack.children);
        const nextMobileButton = document.querySelector('.carousel-mobile .carousel-control.next');
        const prevMobileButton = document.querySelector('.carousel-mobile .carousel-control.prev');

        const itemsPerGroup = 6;
        const groups = [];
        
        // Group items into sets of 6
        while (mobileItems.length > 0) {
            const group = mobileItems.splice(0, itemsPerGroup);
            const groupDiv = document.createElement('div');
            groupDiv.classList.add('carousel-group');
            group.forEach(item => groupDiv.appendChild(item));
            groups.push(groupDiv);
            mobileTrack.appendChild(groupDiv);
        }

        let currentSlide = 0;
        const totalSlides = groups.length;

        function moveToSlide(slideIndex) {
            const moveDistance = 100 * slideIndex;
            mobileTrack.style.transform = `translateX(-${moveDistance}%)`;
            currentSlide = slideIndex;
        }

        nextMobileButton.addEventListener('click', function () {
            if (currentSlide < totalSlides - 1) {
                moveToSlide(currentSlide + 1);
            }
        });

        prevMobileButton.addEventListener('click', function () {
            if (currentSlide > 0) {
                moveToSlide(currentSlide - 1);
            }
        });

        window.addEventListener('resize', function () {
            moveToSlide(currentSlide);
        });

        moveToSlide(0);

        // Open accordion when reached hash
        const hash = window.location.hash;

        if (hash) {
        const targetAccordion = document.querySelector(hash);
        
        if (targetAccordion && targetAccordion.classList.contains('accordion-header')) {
            // Close all accordions
            document.querySelectorAll('.accordion-content').forEach(content => {
            content.style.height = '0px';
            content.previousElementSibling.classList.remove('active');
            content.previousElementSibling.querySelector('.accordion-icon').innerHTML = `
                <svg width="14" height="13" viewBox="0 0 14 13" fill="none" xmlns="http://www.w3.org/2000/svg">
                <path d="M7.21667 0L7.21667 13M0.5 6.5H7.21667L13.5 6.5" stroke="#5A5857" stroke-width="1.5"/>
                </svg>
            `;
            });

            // Open the targeted accordion
            const content = targetAccordion.nextElementSibling;
            content.style.height = 'auto';
            targetAccordion.classList.add('active');
            targetAccordion.querySelector('.accordion-icon').innerHTML = `
            <svg width="14" height="2" viewBox="0 0 14 2" fill="none" xmlns="http://www.w3.org/2000/svg">
                <path d="M0.5 1L7.21667 1L13.5 1" stroke="#5A5857" stroke-width="1.5"/>
            </svg>
            `;

            // Optional: smooth scroll again (sometimes scroll to hash is fast and missed)
            setTimeout(() => {
            targetAccordion.scrollIntoView({ behavior: 'smooth' });
            }, 500);
        }
        }


    });
  </script>