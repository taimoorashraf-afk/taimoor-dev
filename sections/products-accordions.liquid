{% comment %} Include JsZip to download all files {% endcomment %}
<script src="{{ 'jszip.min.js' | asset_url }}" defer></script>

{% if customer %}
    <section class="technical-accordions" id="product_downloads">
        <div class="container">
            <h2 class="section-title font-neue-light text-dark">{{ section.settings.Downloads_heading }}</h2>
            
            <div class="accordion">
                <div class="accordion-header active">
                    <span class="accord-title font-neue-light">Spec Sheets</span>
                    <span class="accord-right">
                        <span class="accordion-icon">
                            <svg width="14" height="13" viewBox="0 0 14 13" fill="none" xmlns="http://www.w3.org/2000/svg">
                                <path d="M7.21667 0L7.21667 13M0.5 6.5H7.21667L13.5 6.5" stroke="#5A5857" stroke-width="1.5"/>
                            </svg>
                        </span>
                    </span>
                </div>
                <div class="accordion-content" style="height: auto;">
                    <div id="specs-files-accordion" 
                        data-metaobject-id='{{ product.metafields.custom.product_multiple_info.value | json }}'
                        class="accordion-downloads">
                    </div>
                </div>
            </div>

            <div class="accordion">
                <div class="accordion-header">
                    <span class="accord-title font-neue-light">Brochure</span>
                    <span class="accord-right">
                        <span class="accordion-icon">
                            <svg width="14" height="13" viewBox="0 0 14 13" fill="none" xmlns="http://www.w3.org/2000/svg">
                                <path d="M7.21667 0L7.21667 13M0.5 6.5H7.21667L13.5 6.5" stroke="#5A5857" stroke-width="1.5"/>
                            </svg>
                        </span>
                    </span>
                </div>
                <div class="accordion-content">
                    <div id="brochure-accordion" 
                        data-metaobject-id='{{ product.metafields.custom.product_multiple_info.value | json }}'
                        class="accordion-downloads">
                    </div>
                </div>
            </div>

            <div class="accordion">
                <div class="accordion-header">
                    <span class="accord-title font-neue-light">Install Instructions</span>
                    <span class="accord-right">
                        <span class="accordion-icon">
                            <svg width="14" height="13" viewBox="0 0 14 13" fill="none" xmlns="http://www.w3.org/2000/svg">
                                <path d="M7.21667 0L7.21667 13M0.5 6.5H7.21667L13.5 6.5" stroke="#5A5857" stroke-width="1.5"/>
                            </svg>
                        </span>
                    </span>
                </div>
                <div class="accordion-content">
                    <div id="inst-instructions-accordion" 
                        data-metaobject-id='{{ product.metafields.custom.product_multiple_info.value | json }}'
                        class="accordion-downloads">
                    </div>
                </div>
            </div>

            <div class="accordion">
                <div class="accordion-header">
                    <span class="accord-title font-neue-light">IES Files</span>
                    <span class="accord-right">
                        <span class="accordion-icon">
                            <svg width="14" height="13" viewBox="0 0 14 13" fill="none" xmlns="http://www.w3.org/2000/svg">
                                <path d="M7.21667 0L7.21667 13M0.5 6.5H7.21667L13.5 6.5" stroke="#5A5857" stroke-width="1.5"/>
                            </svg>
                        </span>
                    </span>
                </div>
                <div class="accordion-content">
                    <div id="ies-files-accordion" 
                        data-metaobject-id='{{ product.metafields.custom.product_multiple_info.value | json }}'
                        class="accordion-downloads">
                    </div>
                </div>
            </div>
        </div>
    </section>
{% endif %}

<style type="text/css">
    .accordion-content {
        height: 0px;
        overflow: hidden;
        padding: 0px;
        transition: 0.3s all;
    }

    .accordion-content p{
        margin-top: 0px;
    }

    section.technical-accordions .section-title {
        margin: 0px 0px 35px;
        font-size: 4.167vw;
        line-height: 4.653vw;
    }

    .accordion-header {
        padding: 10px 0px;
        cursor: pointer;
        display: flex;
        justify-content: space-between;
        align-items: center;
        border-top: 1.5px solid rgba(41, 37, 33, 1);
        font-size: 2.083vw;
        line-height: 2.917vw;
        letter-spacing: 0.65px;
    }

    .accordion-header.active {
        padding-bottom: 20px;
    }

    .accordion-icon {
        font-size: 22px;
        transition: transform 0.3s ease;
        padding-right: 13px;
        font-weight: 300;
        display: flex;
        align-items: center;
    }

    section.technical-accordions .container {
        padding: 0px;
    }

    .accordion-download-item img {
        margin-left: 12px;
    }

    .accordion-downloads {
        display: flex;
        flex-wrap: wrap;
        gap: 20px;
        margin-bottom: 65px;
    }

    .accordion-download-item {
        border: 1.25px solid rgba(41, 37, 33, 1);
        padding: 0px;
        border-radius: 8px;
        display: flex;
        justify-content: center;
        align-items: center;
    }

    .accordion-download-item a{
        font-size: 14px;
        line-height: 17.5px;
        text-transform: uppercase;
        color: rgba(41, 37, 33, 1);
        display: flex;
        align-items: center;
        gap: 0px 16px;
        height: 40px;
        padding: 0px 29px;
    }

    section.technical-accordions {
        padding-bottom: 0;
        padding-top: 77px;
    }

    section.technical-accordions .accordion:last-child {
        border-bottom: none;
    }

    .accordion-download-item:hover {
        background-color: rgba(41, 37, 33, 1);
    }

    .accordion-download-item:hover a {
        color: rgba(249, 246, 243, 1);
    }

    .accordion-download-item:hover svg path {
        stroke: rgba(249, 246, 243, 1);
    }

    .accordion-icon svg {
        width: 13px;
        height: 13px;
    }

    .accordion-header.active {
        padding-bottom: 20px;
    }

    /*
    ** Responsive
    */

    @media (min-width: 1500px){
        section.technical-accordions .section-title {
            font-size: 60px;
            line-height: 67px;
        }
        .accordion-header, section.installation-videos .section-title {
            font-size: 30px;
            line-height: 42px;
        }
    }

    @media (max-width: 1300px){
        section.technical-accordions .container{
            padding: 0px 20px;
        }
    }

    @media (max-width: 767px){
        section.technical-accordions {
            padding-top: 80px;
            padding-bottom: 0px;
        }
        section.technical-accordions .section-title{
            font-size: 50px;
            line-height: 57px;
            margin-bottom: 15px;
        }
        .accordion {
            margin-top: 0;
        }
        .accordion-header {
            font-size: 30px;
            line-height: 42px;
            padding-bottom: 35px;
        }
        .accordion-download-item {
            width: 100%;
        }
        .accordion-download-item a{
            display: flex;
            align-items: center;
            justify-content: center;
            text-align: center;
            padding: 0 15px;
        }
    }
</style>

<script type="text/javascript">
    document.addEventListener('DOMContentLoaded', () => {
        const accordionHeaders = document.querySelectorAll('.accordion-header');
        
        // Function to close all accordions
        const closeAllAccordions = () => {
            document.querySelectorAll('.accordion-content').forEach(content => {
                content.style.height = '0px';


                const previousSibling = content.previousElementSibling
                if(previousSibling){
                    previousSibling?.classList.remove('active');
                    if(previousSibling.querySelector('.accordion-icon')){
                        previousSibling.querySelector('.accordion-icon').textContent = '+';
                    }
                }

                content.previousElementSibling.classList.remove('active');
                if(content.previousElementSibling.querySelector('.accordion-icon')){
                    content.previousElementSibling.querySelector('.accordion-icon').innerHTML = '<svg width="14" height="13" viewBox="0 0 14 13" fill="none" xmlns="http://www.w3.org/2000/svg"><path d="M7.21667 0L7.21667 13M0.5 6.5H7.21667L13.5 6.5" stroke="#5A5857" stroke-width="1.5"></path></svg>';
                }
            });
        };

        // Function to open specific accordion
        const openAccordion = (header) => {
            const content = header.nextElementSibling;
            content.style.height = 'auto';
            header.classList.add('active');

            if(header.querySelector('.accordion-icon')) header.querySelector('.accordion-icon').textContent = '-';
            
            if(header.querySelector('.accordion-icon')){
                header.querySelector('.accordion-icon').innerHTML = '<svg width="14" height="2" viewBox="0 0 14 2" fill="none" xmlns="http://www.w3.org/2000/svg"><path d="M0.5 1L7.21667 1L13.5 1" stroke="#5A5857" stroke-width="1.5"></path></svg>';
            }
        };

        // Add click event listeners to all accordion headers
        accordionHeaders.forEach(header => {
            header.addEventListener('click', () => {
                if (header.classList.contains('active')) {
                    // If clicking an active accordion, just close it
                    closeAllAccordions();
                } else {
                    // Close all accordions then open the clicked one
                    closeAllAccordions();
                    openAccordion(header);
                }
            });

        });

        // Open first accordion by default
        if (accordionHeaders.length > 0) {
            openAccordion(accordionHeaders[0]);
        }

        // Initialize product files after setting up accordions
        initProductFiles();
    });

    // Downloads section
    const initProductFiles = () => {
        console.log('Initializing product files viewer');
        
        const metafieldContainer = document.getElementById('specs-files-accordion');
        const metafieldValue = metafieldContainer?.dataset?.metaobjectId;

        if (!metafieldValue) {
            console.error('No metafield value found');
            return;
        }

        try {
            const metafieldData = JSON.parse(metafieldValue);
            
            if (Array.isArray(metafieldData) && metafieldData.length > 0) {
                const productData = metafieldData[0];

                // Update accordion titles
                const titleFields = [
                    'title_of_first_accordion',
                    'title_of_second_accordion',
                    'title_of_third_accordion',
                    'title_of_fourth_accordion'
                ];

                const accordionHeaders = document.querySelectorAll('.accordion .accord-title');
                
                titleFields.forEach((fieldName, index) => {
                    if (productData[fieldName] && accordionHeaders[index]) {
                        // console.log(`Setting accordion ${index} title to:`, productData[fieldName]);
                        accordionHeaders[index].textContent = productData[fieldName];
                    }
                });
              
                const fileTypes = {
                    specs: 'product_specs_sheets',
                    brochure: 'product_brochure',
                    ies: 'product_ies_files',
                    instructions: 'product_install_instructions'
                };

                Object.entries(fileTypes).forEach(([type, fieldName]) => {
                    const ids = productData[fieldName] || [];
                    if (ids.length > 0) {
                        ids.forEach(id => {
                            fetchMetaobjectData(id, type);
                        });
                    } else {
                        console.log(`No IDs found for ${type}`);
                    }
                });
            }
        } catch (error) {
            console.error('Error parsing metafield data:', error);
        }
    };
  
  async function downloadFilesAsZip(files, type, zipFileName) {
    try {
      const zip = new JSZip();
      
      // Show loading state
      const downloadBtn = event.target.closest('.download-all-btn');
      const originalText = downloadBtn.innerHTML;
      downloadBtn.innerHTML = 'Processing...';
      downloadBtn.style.opacity = '0.7';
  
      // Process each file
      for (const file of files) {
        try {
          const response = await fetch(file.url);
          
          if (!response.ok) {
            throw new Error(`HTTP error! status: ${response.status}`);
          }
  
          const content = await response.blob();
          
          // Set file extension based on type
          const extension = type === 'ies' ? 'zip' : 'pdf';
          const fileName = `${file.title}.${extension}`;
          
          // Add to zip
          zip.file(fileName, content);
  
        } catch (error) {
          console.error(`Error processing ${file.title}:`, error);
        }
      }
  
      // Generate ZIP
      const content = await zip.generateAsync({
        type: 'blob',
        compression: 'DEFLATE',
        compressionOptions: {
          level: 6
        }
      });
  
      // Create download
      const url = window.URL.createObjectURL(content);
      const link = document.createElement('a');
      link.href = url;
      link.download = zipFileName;
      document.body.appendChild(link);
      link.click();
  
      // Cleanup
      setTimeout(() => {
        window.URL.revokeObjectURL(url);
        document.body.removeChild(link);
        downloadBtn.innerHTML = originalText;
        downloadBtn.style.opacity = '1';
      }, 1000);
  
    } catch (error) {
      console.error('Error creating zip:', error);
      const downloadBtn = event.target.closest('.download-all-btn');
      downloadBtn.innerHTML = originalText;
      downloadBtn.style.opacity = '1';
      alert('There was an error creating the ZIP file. Please try again.');
    }
  }
  
  function appendFiles(metaobject, type) {
      const containerMap = {
          specs: 'specs-files-accordion',
          brochure: 'brochure-accordion',
          ies: 'ies-files-accordion',
          instructions: 'inst-instructions-accordion'
      };
  
      const titleFieldMap = {
          specs: 'specs_sheet_title',
          brochure: 'brochure_title',
          ies: 'ies_title',
          instructions: 'install_instruction_title'
      };
  
      const fileFieldMap = {
          specs: 'specs_sheet_p_df',
          brochure: 'brochure_pdf',
          ies: 'ies_pdf_file',
          instructions: 'install_instruction_pdf'
      };
  
      const containerId = containerMap[type];
      const container = document.getElementById(containerId);
      
      if (!container) {
          console.error(`Container not found for type: ${type}`);
          return;
      }
  
      const titleField = metaobject.fields.find(field => field.key === titleFieldMap[type]);
      const fileField = metaobject.fields.find(field => field.key === fileFieldMap[type]);
  
      if (!fileField?.reference?.url) {
          return;
      }
  
      const title = titleField ? titleField.value : '';
      const url = fileField.reference.url;
      const isIesFile = type === 'ies';
  
      // Store file data
      let files = [];
      try {
          files = JSON.parse(container.dataset.files || '[]');
      } catch (e) {
          files = [];
      }
  
      files.push({ 
          url: url, 
          title: title,
          type: type
      });
  
      container.dataset.files = JSON.stringify(files);
  
      // Create file item
      const fileItem = document.createElement('div');
      fileItem.className = 'accordion-download-item';
      
      // For IES files, don't add download attribute to preserve ZIP format
      // For other files, add download attribute for PDF download
      const downloadAttr = !isIesFile ? 'download' : '';
      fileItem.innerHTML = `
          <a href="${url}" ${downloadAttr} class="font-calling-code" target="_blank">
              ${title}
              <svg width="12" height="13" viewBox="0 0 12 13" fill="none" xmlns="http://www.w3.org/2000/svg">
                  <path d="M10.5 6.72721L5.71988 11.8L10.5 6.72721Z" fill="#292521"/>
                  <path d="M0.939753 6.72721L5.71988 11.8L0.939753 6.72721Z" fill="#292521"/>
                  <path d="M5.71988 0L5.71988 11.8M5.71988 11.8L10.5 6.72721M5.71988 11.8L0.939752 6.72721" stroke="#292521" stroke-width="1.5" stroke-miterlimit="10"/>
              </svg>
          </a>
      `;
  
      // Add "Download All" button if needed
      if (!container.querySelector('.download-all-btn') && files.length > 0) {
          const downloadAllItem = document.createElement('div');
          downloadAllItem.className = 'accordion-download-item';
          downloadAllItem.innerHTML = `
              <a href="javascript:void(0)" class="font-calling-code download-all-btn">
                  Download All
                  <svg width="12" height="13" viewBox="0 0 12 13" fill="none" xmlns="http://www.w3.org/2000/svg">
                      <path d="M10.5 6.72721L5.71988 11.8L10.5 6.72721Z" fill="#292521"/>
                      <path d="M0.939753 6.72721L5.71988 11.8L0.939753 6.72721Z" fill="#292521"/>
                      <path d="M5.71988 0L5.71988 11.8M5.71988 11.8L10.5 6.72721M5.71988 11.8L0.939752 6.72721" stroke="#292521" stroke-width="1.5" stroke-miterlimit="10"/>
                  </svg>
              </a>
          `;
          
          // Add click handler
          downloadAllItem.querySelector('.download-all-btn').addEventListener('click', (event) => {
              const currentFiles = JSON.parse(container.dataset.files || '[]');
              if (currentFiles.length > 0) {
                  downloadFilesAsZip(currentFiles, type, `${type}-files.zip`);
              }
          });
          
          container.insertBefore(downloadAllItem, container.firstChild);
      }
  
      // Add new file item
      container.appendChild(fileItem);
  }

function fetchMetaobjectData(metaobjectId, type) {
    //optimize this for better page speed 
    // console.log(`Fetching ${type} data for metaobject:`, metaobjectId);

    const query = `query MetaobjectQuery($id: ID!) {
        metaobject(id: $id) {
            fields {
                key
                value
                reference {
                    ... on GenericFile {
                        url
                    }
                }
            }
        }
    }`;

    fetch(`${window.Shopify.routes.root}api/graphql.json`, {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
            'X-Shopify-Storefront-Access-Token': window.shopifyStorefrontAccessTokens[window.location.origin]
        },
        body: JSON.stringify({ 
            query, 
            variables: { id: metaobjectId } 
        })
    })
    .then(response => response.json())
    .then(data => {
        if (data.data?.metaobject) {
            appendFiles(data.data.metaobject, type);
        }
    })
    .catch(error => console.error(`Error fetching ${type} files:`, error));
}

</script>

{% schema %}
{
    "name": "Products Accordions",
    "settings": [
        {
            "type": "text",
            "id": "Downloads_heading",
            "label": "Section heading"
        }
    ],
    "presets": [
        {
        "name": "Products Accordions",
        "category": "Custom"
        }
    ] 
}
{% endschema %}