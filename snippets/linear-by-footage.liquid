<link rel="stylesheet" href="{{ 'linear.css' | asset_url }}">

<div class="form-row">
  <label class="form-labels font-neue-roman">Dimming
    <span id="selected-dimming-display" class="font-neue-roman"></span>
  </label>

  {% assign configurations_list = product.metafields.custom.configurations.value %}

  <div class="option-list" optionsetsystemhandle="linear" optionsethandle="dimming">
    <div class="options-wrapper">
      {%- for config_entry in configurations_list -%}
        <input type="hidden" name="selected_option_{{ forloop.index0 }}" value="" />
        {%- for linear_option in config_entry.linear_options.value -%}
          <div class="pc-swatch" triggerimagechange="True">
            <input
              type="radio"
              id="dimming__{{ forloop.parentloop.index0 }}__{{ forloop.index0 }}"
              name="dimming_group_{{ forloop.parentloop.index0 }}"
              value="{{ linear_option.display_title | escape }}"
              class="pc_options hide"
              data-group="{{ forloop.parentloop.index0 }}"
              data-dimming-type="{{ linear_option.display_title | handleize }}"
              data-linear-option="{{ linear_option | json | escape }}"
              data-option-handle="{{ linear_option.display_title | handleize }}"
            >
            <label for="dimming__{{ forloop.parentloop.index0 }}__{{ forloop.index0 }}" class="linear-opt-btn font-neue-roman">
              {{ linear_option.display_title }}
            </label>
          </div>
        {%- endfor -%}
      {%- endfor -%}
    </div>
  </div>

  <label class="form-labels font-neue-roman">
    Total Linear Footage of Fixtures
    <div class="tooltip">
      <svg width="11" height="11" viewBox="0 0 17 17" fill="none" xmlns="http://www.w3.org/2000/svg">
        <rect x="0.5" y="0.5" width="16" height="16" rx="8" stroke="#292521"/>
        <path d="M7.75 9.73684V9.42105C7.75 8.76316 8 8.39474 8.92105 7.6579C9.72368 7.02632 9.93421 6.71053 9.93421 6.19737C9.93421 5.4079 9.39474 4.94737 8.48684 4.94737C7.53947 4.94737 7.02632 5.44737 7.02632 6.39474V6.5H6V6.28947C6 4.82895 6.89474 4 8.5 4C10.0263 4 11 4.81579 11 6.07895C11 7.02632 10.7237 7.46053 9.69737 8.28947C8.94737 8.89474 8.77632 9.10526 8.77632 9.48684V9.73684H7.75ZM8.34211 13C7.77632 13 7.35526 12.5789 7.35526 12.0132C7.35526 11.4474 7.77632 11.0263 8.34211 11.0263C8.9079 11.0263 9.32895 11.4474 9.32895 12.0132C9.32895 12.5789 8.9079 13 8.34211 13Z" fill="#292521"/>
      </svg>
      <span class="tooltip-text font-neue-roman">
        <span class="metafield-rich_text_field">
          <p>Total Linear Footage of Fixtures</p>
        </span>
      </span>
    </div>
  </label>

  <input id="total-linear-footage" min="1" max="9999" name="" type="number" class="field-styles">
  <span total-linear-footage-error class="error" style="display: none;"></span>

  <input type="hidden" id="selected-dimming-type" value="">
  <input type="hidden" id="selected-linear-option" value="">
</div>

<div class="form-row select-styles">
  <label class="form-labels font-neue-roman">Mounting Type</label>
  <div class="select-box-styles">
    <select id="mounting-type" name="" class="dropdown-styles font-neue-roman">
      {% assign configurations_list = product.metafields.custom.configurations.value %}
      {% for config_mounting in configurations_list %}
        {% for mounting_type in config_mounting.mounting_options.value %}
        <option value="{{ mounting_type.mounting_type | handleize }}"> {{ mounting_type.option_name }} </option>
        {% endfor %}
      {% endfor %}
    </select>
    <div class="select-arrow">
      <svg width="17" height="10" viewBox="0 0 17 10" fill="none" xmlns="http://www.w3.org/2000/svg">
        <path d="M8.62282 8.4032L15.5 1.52625L14.974 1L8.545 7.40251L2.11603 1L1.59 1.52625L8.545 8.48125L8.62282 8.4032Z" fill="#292521" stroke="#292521"/>
      </svg>
    </div>
  </div>
</div>


<div class="form-row">
  <p class="zone-wattage font-neue-roman">Total Wattage: <span id="total-wattage"></span></p>
  <p class="zone-wattage font-neue-roman margin-b-0">Number of drivers needed: <span id="total-drivers"></span></p>
  <p class="weight-100 italic font-size-15">Max. 20' of fixtures per driver.</p>
</div>

{% if customer.b2b? %}
  <div class="form-row form-action-btns">
    <button id="trigger-bom" class="form-btn-styles font-neue-roman" disabled>Create BOM</button>
  </div>

  <script src="{{ 'helper.js' | asset_url }}" defer></script>
  <script src="{{ 'linear-by-footage.js' | asset_url }}" defer></script>
{% endif %}


<style>
  #selected-dimming-display {
    padding-left: 12px;
    color: #5a5857;
    font-size: 16px;
    line-height: 26px;
    letter-spacing: .65px;
  }

  /* --- Wrapper for all the buttons --- */
  .options-wrapper {
    display: flex;
    flex-wrap: wrap;
    gap: 10px; 
  }

  /* --- Base Styling for the Button Container --- */
  .pc-swatch {
    margin: 0;
    padding: 0;
    border: none; 
  }

  /* --- Core Styling for the Button (The Label) --- */
  .pc-swatch .linear-opt-btn {
    display: flex;
    align-items: center;
    justify-content: center;
    padding: 10px 50px; 
    height: 40px; 
    min-width: 100px; 
    max-width: 95%;

    /* Visuals */
    background-color: #c2bfba1a; /* White background */
    color: #292521; /* Dark text */
    border: 1px solid #c7c3c3; /* Standard border */
    border-radius: 8px; /* Slightly rounded corners */
  }

  /* --- Selected State: Uses the class your JavaScript adds! --- */
  .pc-swatch.selected .linear-opt-btn {
    border: 1px solid black;
    background-color: transparent;
  }
  .hide {
    display: none !important;
  }

  .pc-swatch:has(input:disabled) .linear-opt-btn {
    background: #efefef;
    color: #dad8d8;
    border: 1.5px solid #ebeaea;
    opacity: .7;
    pointer-events: none;
    cursor: not-allowed;
  }

  /* Other styles from your original sheet */
  .option-list{
    padding: 10px 0; /* Adjusted padding */
    background:transparent;
  }
</style>


<script>
document.addEventListener("DOMContentLoaded", function() {
  const dimmingInputs = document.querySelectorAll('.option-list input[type="radio"]');
  const allBillContents = document.querySelectorAll('.bill-contents');
  const bomButton = document.getElementById('trigger-bom');
  const firstInput = dimmingInputs[0];
  const selectedDimmingDisplay = document.getElementById('selected-dimming-display');

  /**
   * Toggles the 'enable' class on the correct BOM content div
   * based on the selected option's handle.
   */
  function setActiveBOM(optionHandle) {
    // 1. Remove the 'enable' class from ALL bill content divs
    allBillContents.forEach(content => {
      content.classList.remove('enable');
    });

    // 2. Find the div matching the option handle
    const activeDivId = `bill-contents-${optionHandle}`;
    const activeDiv = document.getElementById(activeDivId);

    // 3. Add the 'enable' class to the active div
    if (activeDiv) {
      activeDiv.classList.add('enable');
    }
  }

  // --- Main Change Handler Function ---
  // saves the state, it does not display the BOM.
  function handleDimmingChange(inputElement) {
    const groupIndex = inputElement.dataset.group;
    const optionHandle = inputElement.dataset.optionHandle;
    const dimmingType = inputElement.dataset.dimmingType;
    // Get the display title of the selected option
    const displayTitle = inputElement.value;

    // Update selection visual style
    const groupInputs = document.querySelectorAll(`[data-group="${groupIndex}"]`);
    groupInputs.forEach(i => {
        i.closest('.pc-swatch').classList.remove('selected');
    });
    inputElement.closest('.pc-swatch').classList.add('selected');

    // Update the group-specific hidden input field
    const groupSpecificHiddenInput = document.querySelector(`input[name="selected_option_${groupIndex}"]`);
    if (groupSpecificHiddenInput) {
      groupSpecificHiddenInput.value = optionHandle;
    }

    // Update the global fields to store the choice
    const selectedDimmingTypeInput = document.getElementById('selected-dimming-type');
    const selectedLinearOptionInput = document.getElementById('selected-linear-option');
    if (selectedDimmingTypeInput) {
      selectedDimmingTypeInput.value = dimmingType;
    }
    if (selectedLinearOptionInput) {
      selectedLinearOptionInput.value = optionHandle;
    }

    // Update the visible display text
    if (selectedDimmingDisplay) {
        selectedDimmingDisplay.textContent = `${displayTitle}`;
    }

    // Dispatch a custom event
    window.dispatchEvent(new CustomEvent('dimmingSelectionChanged', {
      detail: {
        groupIndex: groupIndex,
        dimmingType,
        optionHandle: optionHandle
      }
    }));
  }

  // --- Radio Button Event Listener Setup ---
  dimmingInputs.forEach(input => {
    input.addEventListener('change', () => {
      handleDimmingChange(input);
    });
  });

  // Event listener for the "Create BOM" button
  if (bomButton) {
    bomButton.addEventListener('click', function(event) {
      event.preventDefault(); // Prevent any default button action

      // Get the handle of the currently selected dimming option from the hidden input
      const selectedOptionHandle = document.getElementById('selected-linear-option').value;

      // If a handle is selected, activate the corresponding BOM section
      if (selectedOptionHandle) {
        setActiveBOM(selectedOptionHandle);
      }
    });
  }

  // --- Set Initial State ---
  if (firstInput) {
    firstInput.checked = true;
    handleDimmingChange(firstInput);
  }
});
</script>