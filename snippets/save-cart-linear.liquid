<div class="search-container">
  <input
    type="text"
    id="search-input"
    class="search-form__input"
    placeholder="Search and select a project"
    aria-label="Search"
    maxlength="25"
    autocomplete="off"
  >
  <ul id="search-suggestions" class="suggestions-list" style="display: none;"></ul>
  <button id="add-project-btn" class="add-project-button">Add to Project</button>
  <div id="message-container" style="display: none;"></div>
</div>

<style>
  .search-container,
  .project-search-container{
    margin-top: 20px;
    display: none;
    gap: 16px;
    display: flex;
    position: relative;
  }
  
  .product-customizer + fixture-accordion .search-container{
    display: flex;
  }
  
  .search-container .search-form__input,
  .project-search-container .project-search-input {
    width: 60%;
  }
  #message-container {
  margin-top: 10px;
  color: green;
  font-size: 16px;
  z-index: 1000;
  line-height: 16px;
  font-family: 'Neue Haas Grotesk Display Pro';
  font-weight: 450 !important;
  letter-spacing: 0.65px;
  display: none;
}

#message-container.error {
  color: red;
}
  .add-project-button{
    height: 50px;
    font-size: 16px;
    line-height: 23px;
    background-color: #292521;
    border: 1px solid #292521;
    padding: 0 26px;
    border-radius: 80px;
    color: #f9f6f3;
    display: flex;
    align-items: center;
    justify-content: space-between;
    letter-spacing: 0.65px;
    min-width: max-content;
  }

  .add-project-button:hover {
    color: #292521;
    background-color: transparent;
  }
  .suggestions-list {
  list-style: none;
  padding: 0;
  margin: 0;
  border: 1px solid #ccc;
  background: #efebe6;
  position: absolute;
  width: 60%;
  max-height: 200px;
  overflow-y: auto;
  z-index: 1000;
  top: 50px;
  border-radius: 5px; /* Optional rounded corners */
  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1); /* Add some shadow */
}

  /* Custom scrollbar styles */
  .suggestions-list::-webkit-scrollbar {
    width: 8px; /* Width of the scrollbar */
    height: 8px; /* Height of the scrollbar */
  }

  .suggestions-list::-webkit-scrollbar-thumb {
    background: #888; /* Color of the scroll thumb */
    border-radius: 4px; /* Rounded corners for the scroll thumb */
  }

  .suggestions-list::-webkit-scrollbar-thumb:hover {
    background: #555; /* Color of the scroll thumb on hover */
  }

  .suggestions-list::-webkit-scrollbar-track {
    background: #f0f0f0; /* Background color of the scrollbar track */
    border-radius: 4px; /* Rounded corners for the track */
  }

  /* Style for individual suggestion items */
  .suggestion-item {
    padding: 10px;
    cursor: pointer;
  }

  .suggestion-item:hover {
    background: #f0f0f0;
  }

  /* No results styling */
  .no-results {
    padding: 10px;
    color: #999;
  }
  .search-form__input,
  .project-search-input {
    border: 1.25px solid #c2bfba;
    margin: 0;
    width: 70%;
    height: 50px;
    padding: 0 21px;
    border-radius: 8px;
    background-color: transparent;
    font-size: 14px;
    line-height: 16px;
    letter-spacing: 0.75px;
    color: #5a5857;
    box-shadow: none !important;
    outline: none !important;
    font-family: Neue Haas Grotesk Display Pro !important;
    font-weight: 450 !important;
}
.search-form__input:focus {
  outline: none; /* Ensures no outline on focus */
}

  /*
** Responsive
*/

@media (max-width: 991px) {
  .search-container{
    flex-flow: column;
  }
  .search-container .search-form__input{
    width: 100%;
  }
}
</style>
<script src="{{ 'api-domain-config.js' | asset_url }}"></script>
<script>
  window.addEventListener('bomDataUpdated', function() {
    console.log("BOM Data Updated:", window.bomData);
  });
const product = {{ product | json }}; // Get product details from Liquid

  async function fetchProductsBySKUs(skus) {
  try {
    const skuFilters = skus.map(sku => `(variant:sku:${sku})`).join(' OR ');
    const PRODUCTS_QUERY = `
      query {
        products(first: 10, query: "${skuFilters}") {
         edges {
            node {
              id
              title
              handle
              variants(first: 5) {
                edges {
                  node {
                    id
                    title
                    sku
                    price {
                      amount
                      currencyCode
                    }
                  }
                }
              }
              images(first:10){
                edges{
                  node{
                    url
                  }
                }
              }
            }
          }
        }
      }
    `;

    console.log('Query being sent:', PRODUCTS_QUERY);

    const response = await fetch('/api/2024-10/graphql.json', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'X-Shopify-Storefront-Access-Token': window.shopifyStorefrontAccessTokens[window.location.origin]
      },
      body: JSON.stringify({
        query: PRODUCTS_QUERY
      })
    });

    const jsonResponse = await response.json();
    // console.log('API Response:', jsonResponse);

    if (jsonResponse?.data?.products?.edges) {
      // Return all products from the response
      const products = jsonResponse.data.products.edges.map(edge => edge.node);
      // console.log('Processed products:', products);
      return products;
    }

    return [];
  } catch (error) {
    console.error('Error fetching products:', error);
    return [];
  }
}

document.addEventListener('DOMContentLoaded', function () {
  const searchInput = document.getElementById('search-input');
  const suggestionsList = document.getElementById('search-suggestions');
  const addButton = document.getElementById('add-project-btn');
  const quantityInput = document.querySelector('.js-qty__num');
  const fixtureInput = document.querySelector('.fixture_input');
  const shopifyCompanyId = {{customer.current_company.id | json}};
  const API_SEARCH_URL = buildApiUrl(`api/cartProjects/all?search=&companyId=${shopifyCompanyId}`);
  const API_UPDATE_URL = buildApiUrl('api/cartProjects/updateProject');

  let selectedProjectId = null;
  let customizedProducts = null;
  let allSkus = [];
  let shopifyProducts = [];

  // Listen for custom event from product-customizer.js
  document.addEventListener('productCustomizerAPIResponse', function(event) {
  customizedProducts = extractProductsFromData(event.detail?.data || []);
  allSkus = customizedProducts.map(product => product.title);
    
  // console.log('Attempting to fetch products for SKUs:', allSkus);
  fetchProductsBySKUs(allSkus).then(products => {
    if (products.length > 0) { // Changed from jsonResponse to products
      shopifyProducts = products; // Store the returned products directly
      // console.log('Stored shopifyProducts:', shopifyProducts);
    } else {
      console.log('No products found for the given SKUs');
    }
  });
});


  // Function to fetch suggestions
  const fetchSuggestions = async (query) => {
    try {
      const url = API_SEARCH_URL.replace('search=', `search=${encodeURIComponent(query)}`);
    const response = await fetch(url);
    const data = await response.json();
      // Populate suggestions list
      suggestionsList.innerHTML = '';
      if (data.data.length > 0) {
        data.data.forEach((project) => {
          const li = document.createElement('li');
          li.textContent = project.name;
          li.setAttribute('data-id', project._id);
          li.classList.add('suggestion-item');
          suggestionsList.appendChild(li);
        });
        suggestionsList.style.display = 'block';
      } else {
        suggestionsList.innerHTML = '<li class="no-results">No results found</li>';
        suggestionsList.style.display = 'block';
      }
    } catch (error) {
      console.error('Error fetching suggestions:', error);
    }
  };

  // Event listener for input typing
  searchInput.addEventListener('input', (e) => {
    const query = e.target.value.trim();
    if (query) {
      fetchSuggestions(query);
    } else {
      suggestionsList.style.display = 'none';
    }
  });

  // Event listener for selecting a suggestion
  suggestionsList.addEventListener('click', (e) => {
    if (e.target.classList.contains('suggestion-item')) {
      const selectedName = e.target.textContent;
      selectedProjectId = e.target.getAttribute('data-id');

      // Update input with selected value
      searchInput.value = selectedName;

      // Hide suggestions list
      suggestionsList.style.display = 'none';
    }
  });

  // Hide suggestions on clicking outside
  document.addEventListener('click', (e) => {
    if (!e.target.closest('.search-container')) {
      suggestionsList.style.display = 'none';
    }
  });

  function showMessage(message, isSuccess = true) {
    const messageContainer = document.getElementById('message-container');
    messageContainer.textContent = message;
    messageContainer.className = isSuccess ? '' : 'error'; // Apply error class if not successful
    messageContainer.style.display = 'block';
  
    // Automatically hide the message after 3 seconds
    setTimeout(() => {
      messageContainer.style.display = 'none';
    }, 3000);
  }

  // Add button click event to send data to the API
  addButton.addEventListener('click', async (e) => {
    e.preventDefault();
    // console.log('shopifyProducts when clicking:', shopifyProducts); 
    // console.log("Product Detailsssssssssssssssssssssssssss:", product);
    if (!selectedProjectId) {
      showMessage('Please select a project first.', false);
      return;
    }
    if (!window.bomData || !window.bomData.length) {
      showMessage('Please generate BOM data first.', false);
      return;
    }

    const fixtureInput = document.querySelector('.fixture_input');
    const currentFixtureType = fixtureInput ? fixtureInput.value.trim() : '';
    
    const requestData = {
    projectId: selectedProjectId,
    updates: [],
    newItems: window.bomData.map(bomItem => {
      // ✅ CREATE PROPERTIES WITH FIXTURE TYPE
      const itemProperties = {
        "MODULE TYPE": "General",
        "PRODUCT_SKU": bomItem.product.variants[0]?.sku || ''
      };
      
      // Add fixture type if available
      if (currentFixtureType) {
        itemProperties["Fixture Type"] = currentFixtureType;
        itemProperties.currentFixture = currentFixtureType;
      }
      
      return {
        product_id: bomItem.product.id,
        variant_id: bomItem.product.variants[0].id,
        quantity: bomItem.quantity,
        handle: bomItem.product.handle,
        product_title: bomItem.product.title,
        originalPrice: parseInt(bomItem.product.variants[0]?.price / 100),
        variant_title: bomItem.product.variants[0].title,
        properties: itemProperties, // ✅ USE UPDATED PROPERTIES
        featured_image: {
          url: bomItem.product.images?.[0]?.src || '',
          alt: bomItem.product.title,
        },
      };
    })
  };

    try {
      const response = await fetch(API_UPDATE_URL, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(requestData),
      });

      const responseData = await response.json();

      if (response.ok) {
        // console.log('API Response:', responseData);
        showMessage('Product added to project successfully!');
      } else {
        console.error('Error:', responseData);
        showMessage('Failed to add product to project.', false);
      }
    } catch (error) {
      console.error('Error:', error);
      showMessage('An error occurred while adding the product to the project.', false);
    }
  });
});
</script>
