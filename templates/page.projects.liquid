{% comment %}
  Project Table Component
  - Displays a list of projects with search and pagination
  - Uses Alpine.js for dynamic functionality
  - Includes enhanced UI with Tailwind CSS
  - Handles empty project list state
  - Added view and delete functionality for projects
{% endcomment %}

<link href="{{ 'tailwind.min.css' | asset_url }}" rel="stylesheet">

{{ 'page.projects.css' | asset_url | stylesheet_tag }}

<div x-data="projectTable()" x-init="init()" class="mt-8 overflow-hidden project-listing page-width">
  <div class="listing-container flex justify-between mb-10" style="align-items: baseline;">
    <h2 class="font-neue-light">Projects</h2>
    <div class="flex search-projects">
      <input
        type="text"
        x-model="searchTerm"
        @keyup.enter="search()"
        class="px-4 py-2 rounded-l-lg focus:outline-none focus:ring-2 focus:ring-blue-300"
        placeholder="Search project"
      >
      <button
        x-show="searchTerm.length > 0"
        @click="clearSearch()"
        class="text-gray-500 hover:text-gray-700 focus:outline-none clearbtn"
      >
        <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
          <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z" clip-rule="evenodd" />
        </svg>
      </button>
      <button
        @click="search()"
        class="bg-black text-white px-6 py-2 rounded-r-lg focus:outline-none transition duration-150 ease-in-out"
      >
        Search
      </button>
      <button
        id="openModalBtn"
        class="ml-3 bg-black text-white px-6 py-2 rounded-lg focus:outline-none transition duration-150 ease-in-out flex items-center gap-2"
      >
        Add project
      </button>
    </div>
  </div>
<div id="modal" class="modal">
  <div class="modal-content">
    <span class="close">
      <svg width="11" height="11" viewBox="0 0 11 11" fill="none" xmlns="http://www.w3.org/2000/svg">
        <path d="M1.05604 0.750599L10.2484 9.94299M0.902835 10.0962L5.65224 5.34679L10.0952 0.903806" stroke="#292521" stroke-width="1.5"/>
      </svg>
    </span>
    <form id="projectForm">
      <label for="projectName">Enter Project Name</label>
      <input type="text" id="projectName" name="projectName" required>
      <div class="actions">
        <button type="submit" class="submit-btn">Submit 
          <span>
            <svg width="20" height="12" viewBox="0 0 20 12" fill="none" xmlns="http://www.w3.org/2000/svg">
              <path d="M0 6.1873H18.0582H0Z" fill="white"/>
              <path d="M12.5345 1L18.0582 6.1873L12.5345 1Z" fill="white"/>
              <path d="M12.5345 11.41L18.0582 6.1873L12.5345 11.41Z" fill="white"/>
              <path d="M0 6.1873H18.0582M18.0582 6.1873L12.5345 1M18.0582 6.1873L12.5345 11.41" stroke="white" stroke-width="1.5" stroke-miterlimit="10"/>
            </svg>
          </span>
        </button>
        <a href="#" id="cancelBtn">Cancel</a>
      </div>
    </form>
  </div>
</div>

<!-- Delete Confirmation Modal -->
<div id="deleteModal" class="modal">
  <div class="modal-content">
    <span class="close delete-close">
      <svg width="11" height="11" viewBox="0 0 11 11" fill="none" xmlns="http://www.w3.org/2000/svg">
        <path d="M1.05604 0.750599L10.2484 9.94299M0.902835 10.0962L5.65224 5.34679L10.0952 0.903806" stroke="#292521" stroke-width="1.5"/>
      </svg>
    </span>
    <div class="delete-form">
      <h3 class="delete-title">Delete Project</h3>
      <p class="delete-message">Are you sure you want to delete this project? This action cannot be undone.</p>
      <div class="actions">
        <button id="confirmDeleteBtn" class="delete-btn">Delete 
          <span>
            <svg width="20" height="12" viewBox="0 0 20 12" fill="none" xmlns="http://www.w3.org/2000/svg">
              <path d="M0 6.1873H18.0582H0Z" fill="white"/>
              <path d="M12.5345 1L18.0582 6.1873L12.5345 1Z" fill="white"/>
              <path d="M12.5345 11.41L18.0582 6.1873L12.5345 11.41Z" fill="white"/>
              <path d="M0 6.1873H18.0582M18.0582 6.1873L12.5345 1M18.0582 6.1873L12.5345 11.41" stroke="white" stroke-width="1.5" stroke-miterlimit="10"/>
            </svg>
          </span>
        </button>
        <a href="#" id="cancelDeleteBtn">Cancel</a>
      </div>
    </div>
  </div>
</div>

  <!-- Loader -->
  <div x-show="loading" class="p-8 text-center projects-loader">
    <svg
      class="animate-spin h-8 w-8 text-blue-500 mx-auto"
      xmlns="http://www.w3.org/2000/svg"
      fill="none"
      viewBox="0 0 24 24"
    >
      <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
      <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C6.477 0 2 4.477 2 10h2zm2 5.291A7.965 7.965 0 014 12H2c0 2.161.879 4.121 2.291 5.709L6 17.291z"></path>
    </svg>
    <p class="font-neue-roman">Loading projects...</p>
  </div>

  <!-- Add an error message display -->
  <div x-show="errorMessage" x-transition class="text-red-700 my-4" x-text="errorMessage"></div>

  <!-- No projects message -->
  <div x-show="!loading && projects.length === 0 && !errorMessage" class="p-8 text-center font-neue-roman no-projects-found">
    No projects found.
  </div>

  <!-- Projects table -->
  <div x-show="!loading && projects.length > 0" class="project-listing-table">
    <table class="table-styles">
      <thead>
        <tr class="uppercase font-neue-roman">
          <th>Project Name</th>
          <th>Created On</th>
          <th>Last Order</th>
          <th>Actions</th>
        </tr>
      </thead>
      <tbody class="font-neue-roman">
        <template x-for="(project, index) in projects" :key="project._id">
          <tr>
            <td @click="selectProject(project._id)" class="project-names-underline cursor-pointer" x-text="project.name"></td>
            <td @click="selectProject(project._id)" class="cursor-pointer" x-text="formatDate(project.createdAt)"></td>
            <td @click="selectProject(project._id)" class="cursor-pointer" x-text="formatDate(project.updatedAt)"></td>
            <td class="action-column">
              <button 
                @click.stop="selectProject(project._id)" 
                class="view-project-btn"
                title="View project"
              >
                <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                  <path d="M1 12s4-8 11-8 11 8 11 8-4 8-11 8-11-8-11-8z"></path>
                  <circle cx="12" cy="12" r="3"></circle>
                </svg>
              </button>
              <button 
                @click.stop="openDeleteConfirmation(project._id, project.name)" 
                class="delete-project-btn"
                title="Delete project"
              >
                <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                  <path d="M3 6h18"></path>
                  <path d="M19 6v14c0 1-1 2-2 2H7c-1 0-2-1-2-2V6"></path>
                  <path d="M8 6V4c0-1 1-2 2-2h4c1 0 2 1 2 2v2"></path>
                </svg>
              </button>
            </td>
          </tr>
        </template>
      </tbody>
    </table>
  </div>

  <!-- Pagination -->
  <div x-show="!loading && projects.length > 0 && totalPages > 1" class="mt-10 flex justify-between items-center">
    <button
      @click="previousPage()"
      :disabled="currentPage === 1"
      class="btn-styles"
    >
      Previous
    </button>
    <span class="font-neue-roman table-pagination" x-text="`Page ${currentPage} of ${totalPages}`"></span>
    <button
      @click="nextPage()"
      :disabled="currentPage === totalPages"
      class="btn-styles"
    >
      Next
    </button>
  </div>
</div>

<style>
  .modal {
    display: none; /* Hidden by default */
    position: fixed;
    z-index: 9999;
    left: 0;
    top: 0;
    width: 100%;
    height: 100%;
    background-color: rgba(41, 37, 33, 0.4); /* Black with opacity */
    justify-content: center;
    align-items: center;
}

.modal-content {
    background-color: #fdf9f5;
    padding: 60px 53px 32px;
    border-radius: 8px;
    width: 519px;
    height: 276px;
    box-shadow: 0px 8px 10px 0px #00000026;
    position: relative;
}

/* Close button */
.close {
    position: absolute;
    top: 20px;
    right: 20px;
    font-size: 18px;
    cursor: pointer;
    width: 36px;
    height: 36px;
    background: rgba(239, 235, 230, 1);
    text-align: center;
    border-radius: 100%;
    display: flex;
    align-items: center;
    justify-content: center;
}

.modal-content span.close svg {
    width: 13px;
    height: 13px;
}

/* Form styles */
form#projectForm {
    display: flex;
    flex-direction: column;
}

#projectForm label {
    margin-bottom: 10px;
    font-size: 16px;
    line-height: 16px;
    font-family: 'Neue Haas Grotesk Display Pro';
    font-weight: 450 !important;
    letter-spacing: 0.65px;
}

#projectForm input[type="text"] {
    padding: 0px 15px;
    border: 1.25px solid #C2BFBA;
    border-radius: 8px;
    font-size: 16px;
    margin-bottom: 16px;
    width: 100%;
    box-shadow: none !important;
    outline: none !important;
    font-family: 'Neue Haas Grotesk Display Pro';
    font-weight: 450 !important;
    letter-spacing: 0.65px;
    height: 50px;
    background-color: transparent;
}

/* Submit button and actions */
#projectForm .actions, .delete-form .actions {
    display: flex;
    justify-content: space-between;
    align-items: center;
    flex-direction: column;
}

#projectForm .submit-btn, .delete-btn {
    display: flex;
    align-items: center;
    padding: 0px 26px;
    height: 50px;
    background-color: #292521;
    border: 1px solid #292521;
    color: #F9F6F3;
    cursor: pointer;
    text-transform: capitalize;
    border-radius: 80px;
    width: 100%;
    justify-content: space-between;
    font-family: 'Neue Haas Grotesk Display Pro';
    font-weight: 450 !important;
    letter-spacing: 0.65px;
    transition: 0.3s all;
    font-size: 16px;
    line-height: 23px;
}

.delete-btn {
    background-color: #d32f2f;
    border: 1px solid #d32f2f;
}

#projectForm .submit-btn svg, .delete-btn svg {
    width: 18.06px;
    height: auto;
    filter: brightness(0) invert(1);
    transition: 0.3s all;
}

#projectForm .submit-btn:hover, .delete-btn:hover {
    color: #292521;
    background-color: transparent;
}

.delete-btn:hover {
    color: #d32f2f;
}

#projectForm .submit-btn:hover svg, .delete-btn:hover svg {
    filter: none;
}

#projectForm #cancelBtn, #cancelDeleteBtn {
    margin-top: 16px;
    color: rgba(41, 37, 33, 1);
    text-transform: uppercase;
    letter-spacing: 0.65px;
    font-family: "Calling Code";
    font-weight: 400;
    text-decoration: underline;
    font-size: 14px;
    line-height: 26px;
}

#projectForm #cancelBtn:hover, #cancelDeleteBtn:hover {
    text-decoration: underline;
}

/* Delete modal specific styles */
.delete-title {
    font-size: 22px;
    font-weight: 500;
    margin-bottom: 15px;
    color: #292521;
}

.delete-message {
    margin-bottom: 30px;
    line-height: 1.5;
    color: #4a4a4a;
}

.action-column {
    text-align: center;
    white-space: nowrap;
}

.view-project-btn,
.delete-project-btn {
    background: none;
    border: none;
    cursor: pointer;
    display: inline-flex;
    align-items: center;
    justify-content: center;
    padding: 5px;
    margin: 0 3px;
    transition: color 0.3s;
}

.view-project-btn {
    color: #2196F3;
}

.delete-project-btn {
    color: #d32f2f;
}

.view-project-btn:hover {
    color: #0b7dda;
}

.delete-project-btn:hover {
    color: #9a0007;
}

/* Mobile responsiveness */
@media screen and (max-width: 991px) {
    .modal {
        padding-left: 6%;
        padding-right: 6%;
    }

    .modal-content {
        padding: 57px 29px 26px;
        width: 309px;
        height: 277px;
    }

    #projectForm label {
        line-height: 26px;
    }
    
    .action-column {
        width: 100px;
    }
}
</style>
<script src="{{ 'api-domain-config.js' | asset_url }}"></script>
<script src="https://cdn.jsdelivr.net/gh/alpinejs/alpine@v2.x.x/dist/alpine.min.js" defer></script>
<script>
  function projectTable() {
    return {
      currentPage: 1,
      totalPages: 1,
      itemsPerPage: 10,
      searchTerm: '',
      projects: [],
      errorMessage: '',
      loading: false,
      shopifyCompanyId: null,
      projectToDelete: null,
      projectNameToDelete: '',

      init() {
        this.shopifyCompanyId = {{customer.current_company.id | json}};
        this.fetchProjects();
      },
      
      clearSearch() {
        this.searchTerm = '';
        this.currentPage = 1;
        this.fetchProjects();
      },

      async fetchProjects() {
        this.loading = true;
        this.errorMessage = '';
        try {
          const shopifyCompanyId = {{customer.current_company.id | json}};
          console.log("shopifyCompanyId", shopifyCompanyId)
          const response = await fetch(buildApiUrl(`api/cartProjects/all?page=${this.currentPage}&limit=${this.itemsPerPage}&search=${this.searchTerm}&companyId=${this.shopifyCompanyId}`), {
            method: 'GET',
            headers: {
              'Accept': 'application/json',
              'Content-Type': 'application/json',
            },
            credentials: 'include',
          });

          if (!response.ok) {
            throw new Error(`HTTP error! status: ${response.status}`);
          }

          const data = await response.json();
          console.log('API Response:', data);

          if (data && Array.isArray(data.data)) {
            this.projects = data.data;
            this.totalPages = data.totalPages || 1;
            this.currentPage = Number(data.currentPage) || 1;
          } else {
            throw new Error('Unexpected data structure in API response');
          }
        } catch (error) {
          console.error('Error fetching projects:', error);
          this.errorMessage = `Failed to fetch projects: ${error.message}`;
          this.projects = [];
          this.totalPages = 1;
          this.currentPage = 1;
        } finally {
          this.loading = false;
        }
      },

      search() {
        this.currentPage = 1;
        this.fetchProjects();
      },

      previousPage() {
        if (this.currentPage > 1) {
          this.currentPage--;
          this.fetchProjects();
        }
      },

      nextPage() {
        if (this.currentPage < this.totalPages) {
          this.currentPage++;
          this.fetchProjects();
        }
      },

      selectProject(projectId) {
        window.location.href = `/pages/project-detail?projectId=${projectId}`; 
        console.log('Selected project:', projectId);
      },

      openDeleteConfirmation(projectId, projectName) {
        this.projectToDelete = projectId;
        this.projectNameToDelete = projectName;
        document.getElementById('deleteModal').style.display = 'flex';
      },

      async deleteProject() {
        if (!this.projectToDelete) return;
        
        try {
          const response = await fetch(`http://dmstaging2.codupcloud.com/api/cartProjects/delete?id=${this.projectToDelete}`, {
            method: 'DELETE',
            headers: {
              'Accept': 'application/json',
              'Content-Type': 'application/json'
            },
            credentials: 'include'
          });

          if (!response.ok) {
            throw new Error(`HTTP error! status: ${response.status}`);
          }

          const result = await response.json();
          
          if (result && result.message === "Project deleted!") {
            showMessage(`Project "${this.projectNameToDelete}" deleted successfully!`, true);
            this.fetchProjects(); // Refresh the project list
          } else {
            showMessage(result.message || "Failed to delete project", false);
          }
        } catch (error) {
          console.error('Error deleting project:', error);
          showMessage(`Failed to delete project: ${error.message}`, false);
        } finally {
          document.getElementById('deleteModal').style.display = 'none';
          this.projectToDelete = null;
          this.projectNameToDelete = '';
        }
      },

      formatDate(dateString) {
        return new Date(dateString).toLocaleDateString('en-US', {
          month: '2-digit',
          day: '2-digit',
          year: 'numeric'
        });
      }
    };
  }
</script>

<script>
 document.addEventListener("DOMContentLoaded", function() {
  // Get modal elements
  const modal = document.getElementById("modal");
  const deleteModal = document.getElementById("deleteModal");
  const openModalBtn = document.getElementById("openModalBtn");
  const closeModalBtn = document.querySelector(".close");
  const closeDeleteModalBtn = document.querySelector(".delete-close");
  const cancelBtn = document.getElementById("cancelBtn");
  const cancelDeleteBtn = document.getElementById("cancelDeleteBtn");
  const confirmDeleteBtn = document.getElementById("confirmDeleteBtn");
  const projectForm = document.getElementById("projectForm");
  const messageContainer = document.createElement("div");

  // Add a container for success/error messages
  messageContainer.id = "message-container";
  messageContainer.style.display = "none";
  messageContainer.style.position = "fixed";
  messageContainer.style.top = "10px";
  messageContainer.style.right = "10px";
  messageContainer.style.padding = "15px";
  messageContainer.style.borderRadius = "5px";
  messageContainer.style.fontSize = "16px";
  messageContainer.style.boxShadow = "0 4px 6px rgba(0, 0, 0, 0.1)";
  messageContainer.style.zIndex = "99999";
  document.body.appendChild(messageContainer);

  // Open modal
  openModalBtn.addEventListener("click", () => {
    modal.style.display = "flex";
  });

  // Close modal when clicking on the close button
  closeModalBtn.addEventListener("click", closeModal);
  closeDeleteModalBtn.addEventListener("click", closeDeleteModal);

  // Close modal when clicking on the cancel link
  cancelBtn.addEventListener("click", (e) => {
    e.preventDefault();
    closeModal();
  });

  // Close delete modal when clicking on the cancel link
  cancelDeleteBtn.addEventListener("click", (e) => {
    e.preventDefault();
    closeDeleteModal();
  });

  // Close modals when clicking outside the modal content
  window.addEventListener("click", (e) => {
    if (e.target === modal) {
      closeModal();
    }
    if (e.target === deleteModal) {
      closeDeleteModal();
    }
  });

  // Handle confirm delete button
  confirmDeleteBtn.addEventListener("click", function(e) {
    e.preventDefault();
    // Get Alpine.js component data
    const projectTableComponent = document.querySelector('[x-data="projectTable()"]').__x.$data;
    projectTableComponent.deleteProject();
  });

  // Function to close modal and clear input
  function closeModal() {
    modal.style.display = "none";
    projectForm.reset();
  }

  // Function to close delete modal
  function closeDeleteModal() {
    deleteModal.style.display = "none";
  }

  // Function to show messages - make it globally available
  window.showMessage = function(message, isSuccess = true) {
    messageContainer.textContent = message;
    messageContainer.style.display = "block";
    messageContainer.style.backgroundColor = isSuccess ? "#d4edda" : "#f8d7da";
    messageContainer.style.color = isSuccess ? "#155724" : "#721c24";
    messageContainer.style.border = isSuccess ? "1px solid #c3e6cb" : "1px solid #f5c6cb";

    setTimeout(() => {
      messageContainer.style.display = "none";
    }, 3000);
  }

  // Handle form submission with API call
  projectForm.addEventListener("submit", function(e) {
    e.preventDefault();
    const projectName = projectForm.querySelector("#projectName").value.trim();

    if (!projectName) {
      showMessage("Please enter a project name", false);
      return;
    }

    // Create data object with empty items array
    const data = {
      name: projectName,
      shopifyCompanyId: {{ customer.current_company.id | json }},
      items: [] // Empty items array
    };

    // Make API call
    fetch(buildApiUrl("api/cartProjects/create"), {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        "Accept": "application/json"
      },
      body: JSON.stringify(data),
    })
    .then(async response => {
      if (!response.ok) {
        const text = await response.text();
        console.error('Server response:', text);
        throw new Error(`Server responded with status ${response.status}`);
      }
      return response.json();
    })
    .then((result) => {
      if (result.message && result.message === "Cart project created!") {
        showMessage("Project saved successfully!", true);
        closeModal();
        // Refresh the projects list
        if (window.Alpine) {
          const projectTableComponent = document.querySelector('[x-data="projectTable()"]').__x.$data;
          projectTableComponent.fetchProjects();
        }
      } else {
        showMessage(result.message || "Failed to save project", false);
      }
    })
    .catch((error) => {
      console.error("Error details:", error);
      showMessage("An error occurred while saving the project", false);
      closeModal();
    });
  });
});
</script>